<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Recursive</title>
 <link href="http://killdream.github.com/feed/" rel="self"/>
 <link href="http://killdream.github.com/"/>
 <updated>2011-09-03T15:03:42-03:00</updated>
 <id>http://killdream.github.com/</id>
 <author>
   <name>Sorella's Basement</name>
   <email>quildreen@gmail.com</email>
 </author>

 
 <entry>
   <title>The Dark-Side of JavaScript</title>
   <link href="http://killdream.github.com//blog/2011/08/the-dark-side-of-javascript/index.html"/>
   <updated>2011-08-15T00:00:00-03:00</updated>
   <id>http://killdream.github.com//blog/2011/08/the-dark-side-of-javascript/the-dark-side-of-javascript</id>
   <content type="html">&lt;p&gt;
&lt;a href=&quot;http://github.com/killdream/black&quot;&gt;Black&lt;/a&gt; is an extension to JavaScript's standard objects, providing
missing functionality, a few aliases and making using generic functions
sweeter.
&lt;/p&gt;
&lt;p&gt;
It supports both functional style:
&lt;/p&gt;



&lt;pre class=&quot;src src-javascript&quot;&gt;black.unpack_all([&lt;span style=&quot;color: #A6E32D;&quot;&gt;'utils'&lt;/span&gt;, &lt;span style=&quot;color: #A6E32D;&quot;&gt;'generic'&lt;/span&gt;])
each(map(filter(links, selectedp)
        ,text)
    ,display)
&lt;/pre&gt;



&lt;p&gt;
And Object Oriented style:
&lt;/p&gt;



&lt;pre class=&quot;src src-javascript&quot;&gt;black.unpack_all([&lt;span style=&quot;color: #A6E32D;&quot;&gt;'own'&lt;/span&gt;])
black.list.to_array(links).filter(selectedp)
                          .map(text)
                          .each(display)
&lt;/pre&gt;



&lt;p&gt;
And it can use either the global scope or patch the native object's
prototype directly, if &lt;b&gt;you&lt;/b&gt; decide to do so.
&lt;/p&gt;
&lt;p&gt;
If you're on Node.js, you can just install it from npm:
&lt;/p&gt;



&lt;pre class=&quot;src src-shell-script&quot;&gt;$ npm install black
&lt;/pre&gt;



&lt;p&gt;
Otherwise, clone the github repository and follow the
&lt;a href=&quot;http://killdream.github.com/black/docs/deploy/overview/installing.html&quot;&gt;installation instructions&lt;/a&gt;.
&lt;/p&gt;



&lt;pre class=&quot;src src-shell-script&quot;&gt;$ git clone htp://github.com/killdream/black.git

&lt;span style=&quot;color: #75766A;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75766A;&quot;&gt;Or if you use hg-git, like me:
&lt;/span&gt;$ hg clone http://github.com/killdream/black.git
&lt;/pre&gt;





&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;The issues &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
Black didn't just sprung out of nowhere, it came into existence to fix
several issues I've had while writing JavaScript code. 
&lt;/p&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-1_1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_1&quot;&gt;Lack of functionality and generic sugar &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_1&quot;&gt;


&lt;p&gt;
The main issue was that I often had to write the same functions over and over
again, because the standard library didn't provide them.
&lt;/p&gt;
&lt;p&gt;
That goes from the simple object handling, that is, merging two objects, from
sequence handling, which I do use &lt;b&gt;a lot&lt;/b&gt;. On this release, I've tried to
include the features I miss the most, for numbers, functions, objects and
sequences.
&lt;/p&gt;
&lt;p&gt;
Yes, &lt;b&gt;sequences&lt;/b&gt;, not &lt;b&gt;Arrays&lt;/b&gt;. Since JavaScript is weakly-typed to the very
core, mostly functionality is intentionally generic. However, using those
generic functions on non-arrays is usually a huge. pain. in. the. ass:
&lt;/p&gt;



&lt;pre class=&quot;src src-javascript&quot;&gt;&lt;span style=&quot;color: #C48DFF;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #729FCF;&quot;&gt;seq&lt;/span&gt; = {0: 1, 1: 2, 2: 3, length: 3}
Array.&lt;span style=&quot;color: #FA2573;&quot;&gt;prototype&lt;/span&gt;.map.call(seq, &lt;span style=&quot;color: #C48DFF;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #729FCF;&quot;&gt;x&lt;/span&gt;){ &lt;span style=&quot;color: #C48DFF;&quot;&gt;return&lt;/span&gt; x + 1 })
&lt;span style=&quot;color: #75766A;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75766A;&quot;&gt;=&amp;gt; [2, 3, 4]
&lt;/span&gt;&lt;/pre&gt;



&lt;p&gt;
That unnecessary verbosity really annoys me. Other thing that does so is the
inconsistency in own and generic methods. You can't just have
&lt;code&gt;Array.slice(sequence)&lt;/code&gt;, even though the method is supposed to be generic, you
need to apply an Array's own method to another object type if you need it. For
me, it just makes no sense.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_2&quot;&gt;Verbosity and hatefulCamelCaseIsHateful &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_2&quot;&gt;


&lt;p&gt;
The second major issue I have is the naming convention used in
JavaScript. Sorry guys, but camelCase sucks way too much to be taken
seriously. And on top of that, lots of functionality have unnecessary and
overly verbose names.
&lt;/p&gt;
&lt;p&gt;
Note that when I say &lt;i&gt;verbose&lt;/i&gt; I don't necessarily mean &lt;b&gt;long&lt;/b&gt;. There's a huge
difference here. Verbosity is the unnecessary extension of a name just for the
sake of having a long name. Descriptive and concise names are your friends when
you actually want to read a piece of code.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_3&quot;&gt;Aliasing hell &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_3&quot;&gt;


&lt;p&gt;
One thing I noticed a lot lately, is that all my JavaScript files were
starting with the following:
&lt;/p&gt;



&lt;pre class=&quot;src src-javascript&quot;&gt;&lt;span style=&quot;color: #C48DFF;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #729FCF;&quot;&gt;map&lt;/span&gt;    = [].map
  , each   = [].each
  , some   = [].some
  , every  = [].every
  , reduce = [].reduce
  , filter = [].filter
  , slice  = [].slice
  , hasp   = {}.hasOwnProperty
  , ( ... )
&lt;/pre&gt;



&lt;p&gt;
Things were coming to a point that I had written a template in &lt;a href=&quot;http://code.google.com/p/yasnippet&quot;&gt;Yasnippet&lt;/a&gt; to
include all those lines for me. But well, even so, it was still quite
unwielding and I still raged every time I saw that shitload of aliases at the
start of every file (things only got worse when the file used external
libraries, btw).
&lt;/p&gt;
&lt;p&gt;
If only current ECMAScript had &lt;a href=&quot;https://developer.mozilla.org/En/New_in_JavaScript_1.7#Destructuring_assignment_(Merge_into_own_page.2fsection)&quot;&gt;destructuring assignment&lt;/a&gt; support, things
wouldn't be as bad:
&lt;/p&gt;



&lt;pre class=&quot;src src-javascript&quot;&gt;&lt;span style=&quot;color: #C48DFF;&quot;&gt;var&lt;/span&gt; {map, each, reduce, filter} = Array.&lt;span style=&quot;color: #FA2573;&quot;&gt;prototype&lt;/span&gt;
&lt;/pre&gt;



&lt;p&gt;
Which is not that much different from Python's:
&lt;/p&gt;



&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #C48DFF;&quot;&gt;from&lt;/span&gt; module &lt;span style=&quot;color: #C48DFF;&quot;&gt;import&lt;/span&gt; x, y, z
&lt;/pre&gt;



&lt;p&gt;
Except you can import anything you want from any object. Having written some
code for SpiderMonkey-only projects before, I can say that JavaScript 1.7
introduces quite a lot of awesomeness I missed in the language for a long time
(and still miss&amp;hellip;)
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;What Black provides &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;



&lt;/div&gt;

&lt;div id=&quot;outline-container-2_1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2_1&quot;&gt;Extensions &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2_1&quot;&gt;


&lt;p&gt;
The main point of Black is to include extensions for working with the
standard objects. Most of the extensions are for working with sequences,
and objects. Extensions are logically divided in modules, and can be
used separately.
&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;type&lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Provides type, interface and functionality testing.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;obj&lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Handles objects as sets of key/values. This includes extracting
lists of keys and values, cherry-picking and transforming them.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;list&lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Handles iteration and manipulation of sequence's structure and
items.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;str&lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Provides generic aliases for built-in utilities and sugar for
JS/CSS interop.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;num&lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Provides a few mathematical functions for boundary handling and
padding.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;fn&lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Provides a few functional utilities. Currently not much useful.
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2_2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2_2&quot;&gt;Sane API naming &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2_2&quot;&gt;


&lt;p&gt;
Black's API uses a naming convention derived from Python and Lisp. Words
are written in all lower-case and separated by underscores. Names are
kept concise and descriptive.
&lt;/p&gt;
&lt;p&gt;
From Common Lisp, it uses the &lt;code&gt;p&lt;/code&gt;-suffix naming convention for predicate
functions (like &lt;code&gt;nullp&lt;/code&gt; for &lt;code&gt;null?&lt;/code&gt; or &lt;code&gt;isNull&lt;/code&gt;). And &lt;code&gt;n&lt;/code&gt;-prefix for
destructive functions when a pure alternative exists.
&lt;/p&gt;
&lt;p&gt;
For functions that construct objects, a &lt;code&gt;make_&lt;/code&gt; prefix is used.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2_3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2_3&quot;&gt;Patching &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2_3&quot;&gt;


&lt;p&gt;
The actual thing about Black, though, is how it handles the aliasing
hell issue. The &lt;code&gt;core&lt;/code&gt; module provides unpacker functions that copies
properties from an Object to another one. Modules decide which
functionality they want to export and where they want it exported by
default.
&lt;/p&gt;
&lt;p&gt;
The unpackers separate functionality into &lt;code&gt;utils&lt;/code&gt;, which are exported to
the global object; &lt;code&gt;generic&lt;/code&gt;, which are exported directly into the
constructor function; and &lt;code&gt;own&lt;/code&gt;, which are exported into the
&lt;code&gt;[⁣[Prototype]⁣]&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
This patching is carried by two functions, the &lt;i&gt;just-do-the-right-thing(tm)&lt;/i&gt;
one, &lt;code&gt;unpack_all&lt;/code&gt;, which will follow the defaults the modules have provided:
&lt;/p&gt;



&lt;pre class=&quot;src src-javascript&quot;&gt;black.unpack_all([&lt;span style=&quot;color: #A6E32D;&quot;&gt;'utils'&lt;/span&gt;, &lt;span style=&quot;color: #A6E32D;&quot;&gt;'generic'&lt;/span&gt;, &lt;span style=&quot;color: #A6E32D;&quot;&gt;'own'&lt;/span&gt;])
&lt;span style=&quot;color: #C48DFF;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #729FCF;&quot;&gt;factor&lt;/span&gt; = 2
first(range(1, 10).filter(&lt;span style=&quot;color: #C48DFF;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #729FCF;&quot;&gt;x&lt;/span&gt;){
    &lt;span style=&quot;color: #C48DFF;&quot;&gt;return&lt;/span&gt; x &amp;gt; 3 * factor }))
&lt;span style=&quot;color: #75766A;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75766A;&quot;&gt;=&amp;gt; 7
&lt;/span&gt;&lt;/pre&gt;



&lt;p&gt;
And the fine-tuned one, if you want control over where you want your
stuff, &lt;code&gt;unpack&lt;/code&gt;:
&lt;/p&gt;



&lt;pre class=&quot;src src-javascript&quot;&gt;&lt;span style=&quot;color: #C48DFF;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #729FCF;&quot;&gt;numbers&lt;/span&gt; = [1, 2, 3, 4, 5]
black.unpack([&lt;span style=&quot;color: #A6E32D;&quot;&gt;'own'&lt;/span&gt;], &lt;span style=&quot;color: #FA2573;&quot;&gt;null&lt;/span&gt;              &lt;span style=&quot;color: #75766A;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75766A;&quot;&gt;global target
&lt;/span&gt;                    , &lt;span style=&quot;color: #FA2573;&quot;&gt;null&lt;/span&gt;              &lt;span style=&quot;color: #75766A;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75766A;&quot;&gt;generic target
&lt;/span&gt;                    , Array.&lt;span style=&quot;color: #FA2573;&quot;&gt;prototype&lt;/span&gt;   &lt;span style=&quot;color: #75766A;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75766A;&quot;&gt;own
&lt;/span&gt;                    , black.list )      &lt;span style=&quot;color: #75766A;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75766A;&quot;&gt;source
&lt;/span&gt;
&lt;span style=&quot;color: #C48DFF;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #67D9F0;&quot;&gt;squared&lt;/span&gt;(&lt;span style=&quot;color: #729FCF;&quot;&gt;x&lt;/span&gt;){ &lt;span style=&quot;color: #C48DFF;&quot;&gt;return&lt;/span&gt; x * x      }
&lt;span style=&quot;color: #C48DFF;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #67D9F0;&quot;&gt;evenp&lt;/span&gt;(&lt;span style=&quot;color: #729FCF;&quot;&gt;x&lt;/span&gt;)  { &lt;span style=&quot;color: #C48DFF;&quot;&gt;return&lt;/span&gt; x % 2 == 0 }
numbers.map(squared).filter(evenp).first()
&lt;span style=&quot;color: #75766A;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75766A;&quot;&gt;=&amp;gt; 4
&lt;/span&gt;&lt;/pre&gt;



&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Wrapping it up &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
This is still an early release of the library, it's usable, but not
thoroughly tested (and all tests have been done only on
Node.js). Though, it has some documentation and examples, and most
functionality I wanted for now, so I'm just making an early release.
&lt;/p&gt;
&lt;p&gt;
I'm planning checking for set difference in the unpackers to avoid
silently writing existing functionality, associative sequence handling,
and other stuff, so well, still lots of work to do :3
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>The Dark-Side of JavaScript</title>
   <link href="http://killdream.github.com//blog/2011/08/the-dark-side-of-javascript/index.html"/>
   <updated>2011-08-15T00:00:00-03:00</updated>
   <id>http://killdream.github.com//blog/2011/08/the-dark-side-of-javascript/the-dark-side-of-javascript</id>
   <content type="html">&lt;p&gt;
&lt;a href=&quot;http://github.com/killdream/black&quot;&gt;Black&lt;/a&gt; is an extension to JavaScript's standard objects, providing
missing functionality, a few aliases and making using generic functions
sweeter.
&lt;/p&gt;
&lt;p&gt;
It supports both functional style:
&lt;/p&gt;



&lt;pre class=&quot;src src-javascript&quot;&gt;black.unpack_all([&lt;span style=&quot;color: #A6E32D;&quot;&gt;'utils'&lt;/span&gt;, &lt;span style=&quot;color: #A6E32D;&quot;&gt;'generic'&lt;/span&gt;])
each(map(filter(links, selectedp)
        ,text)
    ,display)
&lt;/pre&gt;



&lt;p&gt;
And Object Oriented style:
&lt;/p&gt;



&lt;pre class=&quot;src src-javascript&quot;&gt;black.unpack_all([&lt;span style=&quot;color: #A6E32D;&quot;&gt;'own'&lt;/span&gt;])
black.list.to_array(links).filter(selectedp)
                          .map(text)
                          .each(display)
&lt;/pre&gt;



&lt;p&gt;
And it can use either the global scope or patch the native object's
prototype directly, if &lt;b&gt;you&lt;/b&gt; decide to do so.
&lt;/p&gt;
&lt;p&gt;
If you're on Node.js, you can just install it from npm:
&lt;/p&gt;



&lt;pre class=&quot;src src-shell-script&quot;&gt;$ npm install black
&lt;/pre&gt;



&lt;p&gt;
Otherwise, clone the github repository and follow the
&lt;a href=&quot;http://killdream.github.com/black/docs/deploy/overview/installing.html&quot;&gt;installation instructions&lt;/a&gt;.
&lt;/p&gt;



&lt;pre class=&quot;src src-shell-script&quot;&gt;$ git clone htp://github.com/killdream/black.git

&lt;span style=&quot;color: #75766A;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75766A;&quot;&gt;Or if you use hg-git, like me:
&lt;/span&gt;$ hg clone http://github.com/killdream/black.git
&lt;/pre&gt;





&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;The issues &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
Black didn't just sprung out of nowhere, it came into existence to fix
several issues I've had while writing JavaScript code. 
&lt;/p&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-1_1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_1&quot;&gt;Lack of functionality and generic sugar &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_1&quot;&gt;


&lt;p&gt;
The main issue was that I often had to write the same functions over and over
again, because the standard library didn't provide them.
&lt;/p&gt;
&lt;p&gt;
That goes from the simple object handling, that is, merging two objects, from
sequence handling, which I do use &lt;b&gt;a lot&lt;/b&gt;. On this release, I've tried to
include the features I miss the most, for numbers, functions, objects and
sequences.
&lt;/p&gt;
&lt;p&gt;
Yes, &lt;b&gt;sequences&lt;/b&gt;, not &lt;b&gt;Arrays&lt;/b&gt;. Since JavaScript is weakly-typed to the very
core, mostly functionality is intentionally generic. However, using those
generic functions on non-arrays is usually a huge. pain. in. the. ass:
&lt;/p&gt;



&lt;pre class=&quot;src src-javascript&quot;&gt;&lt;span style=&quot;color: #C48DFF;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #729FCF;&quot;&gt;seq&lt;/span&gt; = {0: 1, 1: 2, 2: 3, length: 3}
Array.&lt;span style=&quot;color: #FA2573;&quot;&gt;prototype&lt;/span&gt;.map.call(seq, &lt;span style=&quot;color: #C48DFF;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #729FCF;&quot;&gt;x&lt;/span&gt;){ &lt;span style=&quot;color: #C48DFF;&quot;&gt;return&lt;/span&gt; x + 1 })
&lt;span style=&quot;color: #75766A;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75766A;&quot;&gt;=&amp;gt; [2, 3, 4]
&lt;/span&gt;&lt;/pre&gt;



&lt;p&gt;
That unnecessary verbosity really annoys me. Other thing that does so is the
inconsistency in own and generic methods. You can't just have
&lt;code&gt;Array.slice(sequence)&lt;/code&gt;, even though the method is supposed to be generic, you
need to apply an Array's own method to another object type if you need it. For
me, it just makes no sense.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_2&quot;&gt;Verbosity and hatefulCamelCaseIsHateful &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_2&quot;&gt;


&lt;p&gt;
The second major issue I have is the naming convention used in
JavaScript. Sorry guys, but camelCase sucks way too much to be taken
seriously. And on top of that, lots of functionality have unnecessary and
overly verbose names.
&lt;/p&gt;
&lt;p&gt;
Note that when I say &lt;i&gt;verbose&lt;/i&gt; I don't necessarily mean &lt;b&gt;long&lt;/b&gt;. There's a huge
difference here. Verbosity is the unnecessary extension of a name just for the
sake of having a long name. Descriptive and concise names are your friends when
you actually want to read a piece of code.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_3&quot;&gt;Aliasing hell &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_3&quot;&gt;


&lt;p&gt;
One thing I noticed a lot lately, is that all my JavaScript files were
starting with the following:
&lt;/p&gt;



&lt;pre class=&quot;src src-javascript&quot;&gt;&lt;span style=&quot;color: #C48DFF;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #729FCF;&quot;&gt;map&lt;/span&gt;    = [].map
  , each   = [].each
  , some   = [].some
  , every  = [].every
  , reduce = [].reduce
  , filter = [].filter
  , slice  = [].slice
  , hasp   = {}.hasOwnProperty
  , ( ... )
&lt;/pre&gt;



&lt;p&gt;
Things were coming to a point that I had written a template in &lt;a href=&quot;http://code.google.com/p/yasnippet&quot;&gt;Yasnippet&lt;/a&gt; to
include all those lines for me. But well, even so, it was still quite
unwielding and I still raged every time I saw that shitload of aliases at the
start of every file (things only got worse when the file used external
libraries, btw).
&lt;/p&gt;
&lt;p&gt;
If only current ECMAScript had &lt;a href=&quot;https://developer.mozilla.org/En/New_in_JavaScript_1.7#Destructuring_assignment_(Merge_into_own_page.2fsection)&quot;&gt;destructuring assignment&lt;/a&gt; support, things
wouldn't be as bad:
&lt;/p&gt;



&lt;pre class=&quot;src src-javascript&quot;&gt;&lt;span style=&quot;color: #C48DFF;&quot;&gt;var&lt;/span&gt; {map, each, reduce, filter} = Array.&lt;span style=&quot;color: #FA2573;&quot;&gt;prototype&lt;/span&gt;
&lt;/pre&gt;



&lt;p&gt;
Which is not that much different from Python's:
&lt;/p&gt;



&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #C48DFF;&quot;&gt;from&lt;/span&gt; module &lt;span style=&quot;color: #C48DFF;&quot;&gt;import&lt;/span&gt; x, y, z
&lt;/pre&gt;



&lt;p&gt;
Except you can import anything you want from any object. Having written some
code for SpiderMonkey-only projects before, I can say that JavaScript 1.7
introduces quite a lot of awesomeness I missed in the language for a long time
(and still miss&amp;hellip;)
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;What Black provides &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;



&lt;/div&gt;

&lt;div id=&quot;outline-container-2_1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2_1&quot;&gt;Extensions &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2_1&quot;&gt;


&lt;p&gt;
The main point of Black is to include extensions for working with the
standard objects. Most of the extensions are for working with sequences,
and objects. Extensions are logically divided in modules, and can be
used separately.
&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;type&lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Provides type, interface and functionality testing.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;obj&lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Handles objects as sets of key/values. This includes extracting
lists of keys and values, cherry-picking and transforming them.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;list&lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Handles iteration and manipulation of sequence's structure and
items.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;str&lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Provides generic aliases for built-in utilities and sugar for
JS/CSS interop.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;num&lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Provides a few mathematical functions for boundary handling and
padding.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;fn&lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Provides a few functional utilities. Currently not much useful.
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2_2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2_2&quot;&gt;Sane API naming &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2_2&quot;&gt;


&lt;p&gt;
Black's API uses a naming convention derived from Python and Lisp. Words
are written in all lower-case and separated by underscores. Names are
kept concise and descriptive.
&lt;/p&gt;
&lt;p&gt;
From Common Lisp, it uses the &lt;code&gt;p&lt;/code&gt;-suffix naming convention for predicate
functions (like &lt;code&gt;nullp&lt;/code&gt; for &lt;code&gt;null?&lt;/code&gt; or &lt;code&gt;isNull&lt;/code&gt;). And &lt;code&gt;n&lt;/code&gt;-prefix for
destructive functions when a pure alternative exists.
&lt;/p&gt;
&lt;p&gt;
For functions that construct objects, a &lt;code&gt;make_&lt;/code&gt; prefix is used.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2_3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2_3&quot;&gt;Patching &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2_3&quot;&gt;


&lt;p&gt;
The actual thing about Black, though, is how it handles the aliasing
hell issue. The &lt;code&gt;core&lt;/code&gt; module provides unpacker functions that copies
properties from an Object to another one. Modules decide which
functionality they want to export and where they want it exported by
default.
&lt;/p&gt;
&lt;p&gt;
The unpackers separate functionality into &lt;code&gt;utils&lt;/code&gt;, which are exported to
the global object; &lt;code&gt;generic&lt;/code&gt;, which are exported directly into the
constructor function; and &lt;code&gt;own&lt;/code&gt;, which are exported into the
&lt;code&gt;[⁣[Prototype]⁣]&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
This patching is carried by two functions, the &lt;i&gt;just-do-the-right-thing(tm)&lt;/i&gt;
one, &lt;code&gt;unpack_all&lt;/code&gt;, which will follow the defaults the modules have provided:
&lt;/p&gt;



&lt;pre class=&quot;src src-javascript&quot;&gt;black.unpack_all([&lt;span style=&quot;color: #A6E32D;&quot;&gt;'utils'&lt;/span&gt;, &lt;span style=&quot;color: #A6E32D;&quot;&gt;'generic'&lt;/span&gt;, &lt;span style=&quot;color: #A6E32D;&quot;&gt;'own'&lt;/span&gt;])
&lt;span style=&quot;color: #C48DFF;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #729FCF;&quot;&gt;factor&lt;/span&gt; = 2
first(range(1, 10).filter(&lt;span style=&quot;color: #C48DFF;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #729FCF;&quot;&gt;x&lt;/span&gt;){
    &lt;span style=&quot;color: #C48DFF;&quot;&gt;return&lt;/span&gt; x &amp;gt; 3 * factor }))
&lt;span style=&quot;color: #75766A;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75766A;&quot;&gt;=&amp;gt; 7
&lt;/span&gt;&lt;/pre&gt;



&lt;p&gt;
And the fine-tuned one, if you want control over where you want your
stuff, &lt;code&gt;unpack&lt;/code&gt;:
&lt;/p&gt;



&lt;pre class=&quot;src src-javascript&quot;&gt;&lt;span style=&quot;color: #C48DFF;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #729FCF;&quot;&gt;numbers&lt;/span&gt; = [1, 2, 3, 4, 5]
black.unpack([&lt;span style=&quot;color: #A6E32D;&quot;&gt;'own'&lt;/span&gt;], &lt;span style=&quot;color: #FA2573;&quot;&gt;null&lt;/span&gt;              &lt;span style=&quot;color: #75766A;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75766A;&quot;&gt;global target
&lt;/span&gt;                    , &lt;span style=&quot;color: #FA2573;&quot;&gt;null&lt;/span&gt;              &lt;span style=&quot;color: #75766A;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75766A;&quot;&gt;generic target
&lt;/span&gt;                    , Array.&lt;span style=&quot;color: #FA2573;&quot;&gt;prototype&lt;/span&gt;   &lt;span style=&quot;color: #75766A;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75766A;&quot;&gt;own
&lt;/span&gt;                    , black.list )      &lt;span style=&quot;color: #75766A;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75766A;&quot;&gt;source
&lt;/span&gt;
&lt;span style=&quot;color: #C48DFF;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #67D9F0;&quot;&gt;squared&lt;/span&gt;(&lt;span style=&quot;color: #729FCF;&quot;&gt;x&lt;/span&gt;){ &lt;span style=&quot;color: #C48DFF;&quot;&gt;return&lt;/span&gt; x * x      }
&lt;span style=&quot;color: #C48DFF;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #67D9F0;&quot;&gt;evenp&lt;/span&gt;(&lt;span style=&quot;color: #729FCF;&quot;&gt;x&lt;/span&gt;)  { &lt;span style=&quot;color: #C48DFF;&quot;&gt;return&lt;/span&gt; x % 2 == 0 }
numbers.map(squared).filter(evenp).first()
&lt;span style=&quot;color: #75766A;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75766A;&quot;&gt;=&amp;gt; 4
&lt;/span&gt;&lt;/pre&gt;



&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Wrapping it up &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
This is still an early release of the library, it's usable, but not
thoroughly tested (and all tests have been done only on
Node.js). Though, it has some documentation and examples, and most
functionality I wanted for now, so I'm just making an early release.
&lt;/p&gt;
&lt;p&gt;
I'm planning checking for set difference in the unpackers to avoid
silently writing existing functionality, associative sequence handling,
and other stuff, so well, still lots of work to do :3
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Microframeworks and the state of the web</title>
   <link href="http://killdream.github.com//blog/2011/05/microframeworks-and-the-web-state/index.html"/>
   <updated>2011-05-22T00:00:00-03:00</updated>
   <id>http://killdream.github.com//blog/2011/05/microframeworks-and-the-web-state/microframeworks-and-the-web-state</id>
   <content type="html">&lt;p&gt;
Micro-&quot;&lt;i&gt;frameworks&lt;/i&gt;&quot;&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr.1&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; have been quite a hot topic lately on the
JavaScript community. And by &lt;i&gt;hot&lt;/i&gt;, I mean that it has lead to some
pretty &quot;heated&quot; discussion (either good ones and &quot;bad&quot; ones), and some
&lt;a href=&quot;http://allyoucanleet.com/2011/05/09/microlibs-the-fud-challenge/&quot;&gt;pretty interesting&lt;/a&gt; &lt;a href=&quot;http://tomdale.net/2011/05/an-uphill-battle/&quot;&gt;replies&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
But what's all this fuzz about? Well, the &lt;i&gt;microlibs&lt;/i&gt; introduce a shift
from the monolithic libraries (think &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;http://www.prototypejs.org/&quot;&gt;Prototype&lt;/a&gt;, etc), to
self-contained and &quot;modular&quot; ones.
&lt;/p&gt;
&lt;p&gt;
In this post I'll try to explain what's good and bad about either approaches,
delve a little on modular design and sum up what I think that's wrong with most
JS libs, and where we should go from here.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;/p&gt;&lt;blockquote&gt;

&lt;p&gt;I'm going to use &lt;b&gt;microlibs&lt;/b&gt; thorough this article to refer to what
people call micro-&quot;frameworks&quot;&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr.1.2&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; as I think the name fits better
what they actually are.
&lt;/p&gt;
&lt;/blockquote&gt;



&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;What's wrong with JS frameworks &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
So you have a new web app to develop, and you're looking for some
building blocks because you don't want to write everything from the
scratch?
&lt;/p&gt;
&lt;p&gt;
Toughest luck, my dear.
&lt;/p&gt;
&lt;p&gt;
Welcome to the &quot;Reproducing desktop's UI toolkit mess in the JavaScript
world&quot; show, only worse. A thousand times worse!
&lt;/p&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-1_1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_1&quot;&gt;1. Feature bloat &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_1&quot;&gt;


&lt;p&gt;
If you take &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, which weights around 230kb (31kb minified AND
gzipped), you will get all the following goodies out of the box:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
CSS Selector engine
&lt;/li&gt;
&lt;li&gt;
DOM abstraction API
&lt;/li&gt;
&lt;li&gt;
Deferreds
&lt;/li&gt;
&lt;li&gt;
Ajax/XMLHttpRequest abstractions
&lt;/li&gt;
&lt;li&gt;
JSONP
&lt;/li&gt;
&lt;li&gt;
CSS helpers
&lt;/li&gt;
&lt;li&gt;
Animation/Effects
&lt;/li&gt;
&lt;li&gt;
Event abstraction
&lt;/li&gt;
&lt;li&gt;
Some other small utilities to fill in some standard lib &quot;gaps&quot;
&lt;/li&gt;
&lt;li&gt;
Lots of cross-browser hacks
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
That is, obviously, overwhelming. People usually don't use all of the
features the library provide, and the overhead of this &quot;dead code&quot; feels
even larger because you have tons of them.
&lt;/p&gt;
&lt;p&gt;
The problems are also solved at a reduced scope, as you'd otherwise have
an unwielding codebase/filesize. For example, the effects included in
jQuery only cover the most basic use-cases, whereas other features have
a lot more of coverage — DOM abstraction.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_2&quot;&gt;2. Large filesize &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_2&quot;&gt;


&lt;p&gt;
Having more code equals having a larger filesize, which is a
problem in web apps because you'll be sending a lot of dead code over
the wire.
&lt;/p&gt;
&lt;p&gt;
This is bad from both the end-user's perspective: pages will take more
time to load, and this hurts a good user experience. No one likes
waiting 2 minutes to see a web site.
&lt;/p&gt;
&lt;p&gt;
And from an efficiency's perspective. You should be very worried about
sending lots of code that will never be used, sir. Seriously.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_3&quot;&gt;3. Higher learning curve &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_3&quot;&gt;


&lt;p&gt;
As you have more features, you'll take longer to master them. This is
not really that much of a problem on the end-user dev, because you would
probably have to learn the same amount of things by stacking lots of
small libraries together.
&lt;/p&gt;
&lt;p&gt;
However, the thing is that it'll take far more time to understand all
the implications of the source code to extend it. Whereas with a simpler
and focused library, it would be quite straight forward.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_4&quot;&gt;4. Framework-centric code &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_4&quot;&gt;


&lt;p&gt;
But all these minor annoyances aside, there's one big issue with the way
most JavaScript frameworks are designed: they encourage you to write
Framework-centric code.
&lt;/p&gt;
&lt;p&gt;
Want to write a date handling library? You should tie the core workings
to the jQuery's DOM manipulation functions. What about a library that
abstracts browser storage? TIE IT TO THE FRAMEWORK'S DOM HANDLING LIKE A
BOSS!
&lt;/p&gt;
&lt;p&gt;
Mind you, the browser is not just about the DOM, or a framework. Writing
framework-centric code when your library does NOT extend on the problem
the framework is trying to solve is a silly thing.
&lt;/p&gt;
&lt;p&gt;
The community can't benefit from your contribution as a whole because
they can't include the DOM framework you're using in their
projects. Either because doubling the overhead with code that solves the
same problem should warrant you a death sentence, and because mixing DOM
libraries may break everything in some cases (Prototype + jQuery, for
example).
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Microlibs to the rescue! &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
As a response to that, wild microlibs appeared. The main design goal of
these libraries is to focus on doing just a single thing — and doing
that well, while also &quot;doing the simplest thing that could possibly
work&quot;.
&lt;/p&gt;
&lt;p&gt;
As such, there's little to no overlap on the features offered from one
microlib to another (given they don't try to solve the same problem, of
course) and you get only what you really need. No more, no less.
&lt;/p&gt;
&lt;p&gt;
In fact, microlibs would fit the &lt;a href=&quot;http://en.wikipedia.org/wiki/Unix_philosophy&quot;&gt;Unix philosophy&lt;/a&gt; quite well (the
text streams aside, usually):
&lt;/p&gt;
&lt;blockquote&gt;

&lt;p&gt;Write programs that do one thing and do it well. Write programs to
work together. Write programs to handle text streams, because that is
a universal interface.
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&amp;hellip;but microlibs are broken too &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
Reality is a bit harsh, though. There are a few problems with the
&lt;b&gt;current state&lt;/b&gt; of microlibs, both because they're pretty new and
because somehow this whole size-limit thing has gotten quite messed up.
&lt;/p&gt;
&lt;p&gt;
Some of these problems are quite a show stopper. 
&lt;/p&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-3_1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_1&quot;&gt;1. Lack of documentation &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_1&quot;&gt;


&lt;p&gt;
Documentation is good and shouldn't be overlooked. If you want people to
use your code, you should tell them how they should use it. No, dumping
a weird API reference on a &lt;code&gt;README&lt;/code&gt; file won't cut it. Random words
scrawled over the source won't either.
&lt;/p&gt;
&lt;p&gt;
I'm talking about good documentation on the library btw, not just some
API reference. And most microlibs I know (including my &lt;a href=&quot;http://github.com/killdream/ekho&quot;&gt;Ekho&lt;/a&gt; lib)
have no examples, no use cases, no how to get started, no anything!
&lt;/p&gt;
&lt;p&gt;
But there are worse cases (imo). All &lt;a href=&quot;http://twitter.com/ded&quot;&gt;@ded&lt;/a&gt;'s libraries have almost
no comments on the source code, and rely rather on dumping a little of
introductory text on an obscure &lt;code&gt;README.md&lt;/code&gt; file.
&lt;/p&gt;
&lt;p&gt;
Mind you, I want to know what are the purposes and implications of using
some function if I'm going to extend the library. I don't want to shoot
myself on the foot by accidentally calling a function that happens to
have side-effects which are not apparent from reading the function
alone.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_2&quot;&gt;2. Lack of tests &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_2&quot;&gt;


&lt;p&gt;
Some libraries do have a small amount of test cases, but as
&lt;a href=&quot;http://twitter.com/jDalton&quot;&gt;@jDalton&lt;/a&gt; showed on his &lt;a href=&quot;http://allyoucanleet.com/2011/05/09/microlibs-the-fud-challenge/&quot;&gt;screen cast&lt;/a&gt;, some don't really
have that good of a coverage.
&lt;/p&gt;
&lt;p&gt;
Some libraries (&lt;a href=&quot;http://github.com/killdream/ekho&quot;&gt;Ekho&lt;/a&gt;) have absolutely NO unit tests, which is something you
should find outrageous&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr.2&quot; href=&quot;#fn.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; (and, maybe, help fixing).
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_3&quot;&gt;3. Small community &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_3&quot;&gt;


&lt;p&gt;
This is more related to how recent all these libraries are. They don't
have a large user base like the monolithic frameworks. So it may be
quite more difficult to find an answer to problems you're facing.
&lt;/p&gt;
&lt;p&gt;
It's also likely that the library will have problems that people using
more mature and larger frameworks have already reported. And these would
take a bit to fix as well.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_4&quot;&gt;4. Trying to solve problems they're not meant to &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_4&quot;&gt;


&lt;p&gt;
According to the buzz on the internets, microlibs are supposed to do
&lt;i&gt;only one thing and do it well™&lt;/i&gt;, but in practice, that's not
true. Almost all of these libraries will provide fallbacks for
features that are not related to the design goals of the library,
and worse, for features that are described in the &lt;a href=&quot;http://es5.github.com&quot;&gt;ECMAScript 5&lt;/a&gt;
specs.
&lt;/p&gt;
&lt;p&gt;
Yes, I'm looking at all of the libraries that implement
&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf&quot;&gt;Array#indexOf&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;Array#filter&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;Function#bind&lt;/a&gt; and such
fallbacks, when the library tries to solve an entire different problem.
&lt;/p&gt;
&lt;p&gt;
This creates two problems. The first is that now instead of having dead
code, you have &lt;b&gt;duplicated code&lt;/b&gt;. It's even worse if you're only
targeting platforms which are ES5-compliant, because now you have
&lt;b&gt;duplicated dead code&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
The second problem is that some of these libraries implement things that
don't conform with the specs. And I'm not too keen on having 20
different implementations of &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf&quot;&gt;Array#indexOf&lt;/a&gt; which don't work for
sparse arrays, thank you.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_5&quot;&gt;5. API inconsistencies &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_5&quot;&gt;


&lt;p&gt;
You can't expect to get API consistencies when using libraries from 10
different authors if they're not designed to work together, which you'd
get for free on JavaScript frameworks (or would you?&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr.3&quot; href=&quot;#fn.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;). 
&lt;/p&gt;
&lt;p&gt;
This can be really bad when you need to have two libraries to work
together, say a CSS selector engine and a DOM manipulation library. Of
course you can abstract all of them and create a DSL on top of them,
just as you could read a minified source rather than a properly
commented one&amp;hellip;
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_6&quot;&gt;6. Dependency hell &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_6&quot;&gt;


&lt;p&gt;
Browsers still don't offer native support for modules, although it's
&lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:modules&quot;&gt;being discussed for ES.Next&lt;/a&gt;, nor can you use &lt;code&gt;jspm install microlib&lt;/code&gt; and
have all the dependencies sorted out nicely for you.
&lt;/p&gt;
&lt;p&gt;
The thing is that using lots of small libraries will make your building
and testing process quite more complex. Where you had to include a
simple script tag to load everything you need, you'll need to include
loads of them (in the right order too), or have something that
automagically concatenates those files in the right order.
&lt;/p&gt;
&lt;p&gt;
Either way, it's quite some hassle.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_7&quot;&gt;7. Focus on arbitrary filesize &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_7&quot;&gt;


&lt;p&gt;
Having a soft-limit for filesize isn't necessarily a bad thing. It helps
you to know when you're over-engineering things. However, 
not all the problems are the same that you can happily have a
&lt;a href=&quot;http://tomdale.net/2011/05/an-uphill-battle/&quot;&gt;5kb limit for everynyan&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
With the microlibs, things have somehow gotten screwed up and the focus
that should be into &quot;&lt;b&gt;reducing the scope of the library for modularity&lt;/b&gt;&quot;
(think minimalism), turned into a battle for who could fit an entire DOM
library in a tweet.
&lt;/p&gt;
&lt;p&gt;
I find this whole premature and reckless optimisation for filesize
pretty stupid, of course. &lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-7.html&quot;&gt;As Sussman says&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;

&lt;p&gt;Programs must be written for people to read, and only incidentally for
machines to execute.
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;
Programs should also be written for correctness and to effectively solve
the problems they propose to solve, but I guess everyone knows that
already&amp;hellip;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;What can we do? &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;
So, large and bloated frameworks are a bad idea for web apps, but the
current state of microlibs is also pretty bad. That's no fun, and
definitely not good for the community, right?
&lt;/p&gt;
&lt;p&gt;
The obvious answer to these problems is to focus on writing modular
libraries. And when I say &lt;i&gt;modular&lt;/i&gt;, I'm referring to libraries that fit
the Unix philosophy.
&lt;/p&gt;
&lt;p&gt;
They should be designed to solve just one problem, and solve it well, so
people can decide exactly which problems they want to solve instead of
getting a large black box that tries to solve everything.
&lt;/p&gt;
&lt;p&gt;
They should also be designed to work nicely with other libraries,
otherwise what's the point in having modular stuff anyways? You'll most
likely never have to solve just a single problem when writing a web
app.
&lt;/p&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-4_1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4_1&quot;&gt;A new design philosophy &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4_1&quot;&gt;


&lt;p&gt;
In fact, we can summarise it nicely in a list of few points to keep in
mind when designing a library. Mostly stolen from Eric Raymond's The Art
of Unix Programming book:
&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Modularity   &lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Write simple parts connected by clean interfaces.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Composition  &lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Design libraries to be connected to other libraries.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Simplicity   &lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Design for simplicity; add complexity only where you must.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Correctness  &lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
If it doesn't &lt;b&gt;fully&lt;/b&gt; solves the problem it's designed to solve, it's
broken.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Lazyness     &lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Don't try to solve what's already solved; stop writing broken ES5
fallbacks.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Parsimony    &lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Write big libraries only when it's clear by demonstration that nothing
else will do.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Optimisation &lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Prototype before polishing. Get it working before you optimise it (be
it for size, speed or anything else).
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Extensibility&lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Design for the future, because it will be here sooner than you think
(modules are a good thing, and they'll be added to the language!)
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4_2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4_2&quot;&gt;Problems with this philosophy &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4_2&quot;&gt;


&lt;p&gt;
Obviously, these points are not anything near perfect. And it gets worse
if you take the current state of browser platforms into account. The web
is quite heterogeneous. Even on browsers who do conform with the
standards, you still have some quite funny discrepancies on
the inner workings — and that affects your code.
&lt;/p&gt;
&lt;p&gt;
To make things yet worse, you don't have much things to solve the
dependency hell, aside from writing a custom build tool. And even so,
you'll likely need to download and build a set of different libraries to
get everything working.
&lt;/p&gt;
&lt;p&gt;
This is not exactly my definition of fun.
&lt;/p&gt;
&lt;p&gt;
For this to really work, we'd need a good package manager; like what &lt;a href=&quot;http://github.com/isaacs/npm&quot;&gt;npm&lt;/a&gt;
is to &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt;. And we would also need either some support for loading
these external modules in a sane way (you do &lt;a href=&quot;http://github.com/killdream/jello&quot;&gt;have&lt;/a&gt; &lt;a href=&quot;http://requirejs.org&quot;&gt;some&lt;/a&gt; &lt;a href=&quot;http://labjs.com&quot;&gt;libraries&lt;/a&gt; &lt;a href=&quot;http://news.ycombinator.com/item?id=2300423&quot;&gt;for that&lt;/a&gt;), rather than having to do with build scripts.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;Wrapping it up &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;


&lt;p&gt;
There's no such thing as &lt;b&gt;one true way&lt;/b&gt;. I don't think modular
libraries/frameworks solve all the problems, but they do address quite
some of the problems we have with the current models of libraries.
&lt;/p&gt;
&lt;p&gt;
And it would be nice having a healthier environment for developing new
awesome apps on the Browser, without having to write everything from
scrath again because the thing you need is only included in another
library, and it uses a framework-centric approach.
&lt;/p&gt;
&lt;p&gt;
All in all, it's something I think would benefit the JavaScript
community as a whole :3
&lt;/p&gt;



&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn.1&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; I hate using the term &quot;framework&quot; to refer to libraries with all
my guts. Seriously, people, is `library` **that** hard to spell?
&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn.2&quot; href=&quot;#fnr.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; I'll work on tests and documentation for &lt;a href=&quot;http://github.com/killdream/ekho&quot;&gt;Ekho&lt;/a&gt; and friends when I
have time to do so. Probably after I finish some of the core
concepts/early prototypes for &lt;a href=&quot;http://killdream.github.com/orpheos&quot;&gt;OrpheOS&lt;/a&gt;. Until then, considering
the library a beta release may be a good thing.
&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn.3&quot; href=&quot;#fnr.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; I don't think PrototypeJS has a consistent API, for
example. Though Ruby people might say otherwise, it just strikes
me as odd if you use &lt;code&gt;bindAsEventListener&lt;/code&gt; and &lt;code&gt;gsub&lt;/code&gt; randomly on
your API (I would never take a Ruby programmer's word on good API
design anyways ;P). jQuery's API on the other hand (although I've
only used a small subset of it for a short time) is just a mess
of counter-intuitive and poorly-named methods. People should stop
getting inspired by PHP when designing an API&amp;hellip;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Microframeworks and the state of the web</title>
   <link href="http://killdream.github.com//blog/2011/05/microframeworks-and-the-web-state/index.html"/>
   <updated>2011-05-22T00:00:00-03:00</updated>
   <id>http://killdream.github.com//blog/2011/05/microframeworks-and-the-web-state/microframeworks-and-the-web-state</id>
   <content type="html">&lt;p&gt;
Micro-&quot;&lt;i&gt;frameworks&lt;/i&gt;&quot;&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr.1&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; have been quite a hot topic lately on the
JavaScript community. And by &lt;i&gt;hot&lt;/i&gt;, I mean that it has lead to some
pretty &quot;heated&quot; discussion (either good ones and &quot;bad&quot; ones), and some
&lt;a href=&quot;http://allyoucanleet.com/2011/05/09/microlibs-the-fud-challenge/&quot;&gt;pretty interesting&lt;/a&gt; &lt;a href=&quot;http://tomdale.net/2011/05/an-uphill-battle/&quot;&gt;replies&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
But what's all this fuzz about? Well, the &lt;i&gt;microlibs&lt;/i&gt; introduce a shift
from the monolithic libraries (think &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;http://www.prototypejs.org/&quot;&gt;Prototype&lt;/a&gt;, etc), to
self-contained and &quot;modular&quot; ones.
&lt;/p&gt;
&lt;p&gt;
In this post I'll try to explain what's good and bad about either approaches,
delve a little on modular design and sum up what I think that's wrong with most
JS libs, and where we should go from here.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;/p&gt;&lt;blockquote&gt;

&lt;p&gt;I'm going to use &lt;b&gt;microlibs&lt;/b&gt; thorough this article to refer to what
people call micro-&quot;frameworks&quot;&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr.1.2&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; as I think the name fits better
what they actually are.
&lt;/p&gt;
&lt;/blockquote&gt;



&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;What's wrong with JS frameworks &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
So you have a new web app to develop, and you're looking for some
building blocks because you don't want to write everything from the
scratch?
&lt;/p&gt;
&lt;p&gt;
Toughest luck, my dear.
&lt;/p&gt;
&lt;p&gt;
Welcome to the &quot;Reproducing desktop's UI toolkit mess in the JavaScript
world&quot; show, only worse. A thousand times worse!
&lt;/p&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-1_1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_1&quot;&gt;1. Feature bloat &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_1&quot;&gt;


&lt;p&gt;
If you take &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, which weights around 230kb (31kb minified AND
gzipped), you will get all the following goodies out of the box:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
CSS Selector engine
&lt;/li&gt;
&lt;li&gt;
DOM abstraction API
&lt;/li&gt;
&lt;li&gt;
Deferreds
&lt;/li&gt;
&lt;li&gt;
Ajax/XMLHttpRequest abstractions
&lt;/li&gt;
&lt;li&gt;
JSONP
&lt;/li&gt;
&lt;li&gt;
CSS helpers
&lt;/li&gt;
&lt;li&gt;
Animation/Effects
&lt;/li&gt;
&lt;li&gt;
Event abstraction
&lt;/li&gt;
&lt;li&gt;
Some other small utilities to fill in some standard lib &quot;gaps&quot;
&lt;/li&gt;
&lt;li&gt;
Lots of cross-browser hacks
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
That is, obviously, overwhelming. People usually don't use all of the
features the library provide, and the overhead of this &quot;dead code&quot; feels
even larger because you have tons of them.
&lt;/p&gt;
&lt;p&gt;
The problems are also solved at a reduced scope, as you'd otherwise have
an unwielding codebase/filesize. For example, the effects included in
jQuery only cover the most basic use-cases, whereas other features have
a lot more of coverage — DOM abstraction.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_2&quot;&gt;2. Large filesize &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_2&quot;&gt;


&lt;p&gt;
Having more code equals having a larger filesize, which is a
problem in web apps because you'll be sending a lot of dead code over
the wire.
&lt;/p&gt;
&lt;p&gt;
This is bad from both the end-user's perspective: pages will take more
time to load, and this hurts a good user experience. No one likes
waiting 2 minutes to see a web site.
&lt;/p&gt;
&lt;p&gt;
And from an efficiency's perspective. You should be very worried about
sending lots of code that will never be used, sir. Seriously.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_3&quot;&gt;3. Higher learning curve &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_3&quot;&gt;


&lt;p&gt;
As you have more features, you'll take longer to master them. This is
not really that much of a problem on the end-user dev, because you would
probably have to learn the same amount of things by stacking lots of
small libraries together.
&lt;/p&gt;
&lt;p&gt;
However, the thing is that it'll take far more time to understand all
the implications of the source code to extend it. Whereas with a simpler
and focused library, it would be quite straight forward.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_4&quot;&gt;4. Framework-centric code &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_4&quot;&gt;


&lt;p&gt;
But all these minor annoyances aside, there's one big issue with the way
most JavaScript frameworks are designed: they encourage you to write
Framework-centric code.
&lt;/p&gt;
&lt;p&gt;
Want to write a date handling library? You should tie the core workings
to the jQuery's DOM manipulation functions. What about a library that
abstracts browser storage? TIE IT TO THE FRAMEWORK'S DOM HANDLING LIKE A
BOSS!
&lt;/p&gt;
&lt;p&gt;
Mind you, the browser is not just about the DOM, or a framework. Writing
framework-centric code when your library does NOT extend on the problem
the framework is trying to solve is a silly thing.
&lt;/p&gt;
&lt;p&gt;
The community can't benefit from your contribution as a whole because
they can't include the DOM framework you're using in their
projects. Either because doubling the overhead with code that solves the
same problem should warrant you a death sentence, and because mixing DOM
libraries may break everything in some cases (Prototype + jQuery, for
example).
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Microlibs to the rescue! &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
As a response to that, wild microlibs appeared. The main design goal of
these libraries is to focus on doing just a single thing — and doing
that well, while also &quot;doing the simplest thing that could possibly
work&quot;.
&lt;/p&gt;
&lt;p&gt;
As such, there's little to no overlap on the features offered from one
microlib to another (given they don't try to solve the same problem, of
course) and you get only what you really need. No more, no less.
&lt;/p&gt;
&lt;p&gt;
In fact, microlibs would fit the &lt;a href=&quot;http://en.wikipedia.org/wiki/Unix_philosophy&quot;&gt;Unix philosophy&lt;/a&gt; quite well (the
text streams aside, usually):
&lt;/p&gt;
&lt;blockquote&gt;

&lt;p&gt;Write programs that do one thing and do it well. Write programs to
work together. Write programs to handle text streams, because that is
a universal interface.
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&amp;hellip;but microlibs are broken too &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
Reality is a bit harsh, though. There are a few problems with the
&lt;b&gt;current state&lt;/b&gt; of microlibs, both because they're pretty new and
because somehow this whole size-limit thing has gotten quite messed up.
&lt;/p&gt;
&lt;p&gt;
Some of these problems are quite a show stopper. 
&lt;/p&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-3_1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_1&quot;&gt;1. Lack of documentation &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_1&quot;&gt;


&lt;p&gt;
Documentation is good and shouldn't be overlooked. If you want people to
use your code, you should tell them how they should use it. No, dumping
a weird API reference on a &lt;code&gt;README&lt;/code&gt; file won't cut it. Random words
scrawled over the source won't either.
&lt;/p&gt;
&lt;p&gt;
I'm talking about good documentation on the library btw, not just some
API reference. And most microlibs I know (including my &lt;a href=&quot;http://github.com/killdream/ekho&quot;&gt;Ekho&lt;/a&gt; lib)
have no examples, no use cases, no how to get started, no anything!
&lt;/p&gt;
&lt;p&gt;
But there are worse cases (imo). All &lt;a href=&quot;http://twitter.com/ded&quot;&gt;@ded&lt;/a&gt;'s libraries have almost
no comments on the source code, and rely rather on dumping a little of
introductory text on an obscure &lt;code&gt;README.md&lt;/code&gt; file.
&lt;/p&gt;
&lt;p&gt;
Mind you, I want to know what are the purposes and implications of using
some function if I'm going to extend the library. I don't want to shoot
myself on the foot by accidentally calling a function that happens to
have side-effects which are not apparent from reading the function
alone.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_2&quot;&gt;2. Lack of tests &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_2&quot;&gt;


&lt;p&gt;
Some libraries do have a small amount of test cases, but as
&lt;a href=&quot;http://twitter.com/jDalton&quot;&gt;@jDalton&lt;/a&gt; showed on his &lt;a href=&quot;http://allyoucanleet.com/2011/05/09/microlibs-the-fud-challenge/&quot;&gt;screen cast&lt;/a&gt;, some don't really
have that good of a coverage.
&lt;/p&gt;
&lt;p&gt;
Some libraries (&lt;a href=&quot;http://github.com/killdream/ekho&quot;&gt;Ekho&lt;/a&gt;) have absolutely NO unit tests, which is something you
should find outrageous&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr.2&quot; href=&quot;#fn.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; (and, maybe, help fixing).
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_3&quot;&gt;3. Small community &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_3&quot;&gt;


&lt;p&gt;
This is more related to how recent all these libraries are. They don't
have a large user base like the monolithic frameworks. So it may be
quite more difficult to find an answer to problems you're facing.
&lt;/p&gt;
&lt;p&gt;
It's also likely that the library will have problems that people using
more mature and larger frameworks have already reported. And these would
take a bit to fix as well.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_4&quot;&gt;4. Trying to solve problems they're not meant to &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_4&quot;&gt;


&lt;p&gt;
According to the buzz on the internets, microlibs are supposed to do
&lt;i&gt;only one thing and do it well™&lt;/i&gt;, but in practice, that's not
true. Almost all of these libraries will provide fallbacks for
features that are not related to the design goals of the library,
and worse, for features that are described in the &lt;a href=&quot;http://es5.github.com&quot;&gt;ECMAScript 5&lt;/a&gt;
specs.
&lt;/p&gt;
&lt;p&gt;
Yes, I'm looking at all of the libraries that implement
&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf&quot;&gt;Array#indexOf&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;Array#filter&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;Function#bind&lt;/a&gt; and such
fallbacks, when the library tries to solve an entire different problem.
&lt;/p&gt;
&lt;p&gt;
This creates two problems. The first is that now instead of having dead
code, you have &lt;b&gt;duplicated code&lt;/b&gt;. It's even worse if you're only
targeting platforms which are ES5-compliant, because now you have
&lt;b&gt;duplicated dead code&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
The second problem is that some of these libraries implement things that
don't conform with the specs. And I'm not too keen on having 20
different implementations of &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf&quot;&gt;Array#indexOf&lt;/a&gt; which don't work for
sparse arrays, thank you.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_5&quot;&gt;5. API inconsistencies &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_5&quot;&gt;


&lt;p&gt;
You can't expect to get API consistencies when using libraries from 10
different authors if they're not designed to work together, which you'd
get for free on JavaScript frameworks (or would you?&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr.3&quot; href=&quot;#fn.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;). 
&lt;/p&gt;
&lt;p&gt;
This can be really bad when you need to have two libraries to work
together, say a CSS selector engine and a DOM manipulation library. Of
course you can abstract all of them and create a DSL on top of them,
just as you could read a minified source rather than a properly
commented one&amp;hellip;
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_6&quot;&gt;6. Dependency hell &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_6&quot;&gt;


&lt;p&gt;
Browsers still don't offer native support for modules, although it's
&lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:modules&quot;&gt;being discussed for ES.Next&lt;/a&gt;, nor can you use &lt;code&gt;jspm install microlib&lt;/code&gt; and
have all the dependencies sorted out nicely for you.
&lt;/p&gt;
&lt;p&gt;
The thing is that using lots of small libraries will make your building
and testing process quite more complex. Where you had to include a
simple script tag to load everything you need, you'll need to include
loads of them (in the right order too), or have something that
automagically concatenates those files in the right order.
&lt;/p&gt;
&lt;p&gt;
Either way, it's quite some hassle.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_7&quot;&gt;7. Focus on arbitrary filesize &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_7&quot;&gt;


&lt;p&gt;
Having a soft-limit for filesize isn't necessarily a bad thing. It helps
you to know when you're over-engineering things. However, 
not all the problems are the same that you can happily have a
&lt;a href=&quot;http://tomdale.net/2011/05/an-uphill-battle/&quot;&gt;5kb limit for everynyan&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
With the microlibs, things have somehow gotten screwed up and the focus
that should be into &quot;&lt;b&gt;reducing the scope of the library for modularity&lt;/b&gt;&quot;
(think minimalism), turned into a battle for who could fit an entire DOM
library in a tweet.
&lt;/p&gt;
&lt;p&gt;
I find this whole premature and reckless optimisation for filesize
pretty stupid, of course. &lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-7.html&quot;&gt;As Sussman says&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;

&lt;p&gt;Programs must be written for people to read, and only incidentally for
machines to execute.
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;
Programs should also be written for correctness and to effectively solve
the problems they propose to solve, but I guess everyone knows that
already&amp;hellip;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;What can we do? &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;
So, large and bloated frameworks are a bad idea for web apps, but the
current state of microlibs is also pretty bad. That's no fun, and
definitely not good for the community, right?
&lt;/p&gt;
&lt;p&gt;
The obvious answer to these problems is to focus on writing modular
libraries. And when I say &lt;i&gt;modular&lt;/i&gt;, I'm referring to libraries that fit
the Unix philosophy.
&lt;/p&gt;
&lt;p&gt;
They should be designed to solve just one problem, and solve it well, so
people can decide exactly which problems they want to solve instead of
getting a large black box that tries to solve everything.
&lt;/p&gt;
&lt;p&gt;
They should also be designed to work nicely with other libraries,
otherwise what's the point in having modular stuff anyways? You'll most
likely never have to solve just a single problem when writing a web
app.
&lt;/p&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-4_1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4_1&quot;&gt;A new design philosophy &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4_1&quot;&gt;


&lt;p&gt;
In fact, we can summarise it nicely in a list of few points to keep in
mind when designing a library. Mostly stolen from Eric Raymond's The Art
of Unix Programming book:
&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Modularity   &lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Write simple parts connected by clean interfaces.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Composition  &lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Design libraries to be connected to other libraries.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Simplicity   &lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Design for simplicity; add complexity only where you must.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Correctness  &lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
If it doesn't &lt;b&gt;fully&lt;/b&gt; solves the problem it's designed to solve, it's
broken.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Lazyness     &lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Don't try to solve what's already solved; stop writing broken ES5
fallbacks.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Parsimony    &lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Write big libraries only when it's clear by demonstration that nothing
else will do.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Optimisation &lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Prototype before polishing. Get it working before you optimise it (be
it for size, speed or anything else).
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Extensibility&lt;/dt&gt;&lt;dd&gt;

&lt;p&gt;
Design for the future, because it will be here sooner than you think
(modules are a good thing, and they'll be added to the language!)
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4_2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4_2&quot;&gt;Problems with this philosophy &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4_2&quot;&gt;


&lt;p&gt;
Obviously, these points are not anything near perfect. And it gets worse
if you take the current state of browser platforms into account. The web
is quite heterogeneous. Even on browsers who do conform with the
standards, you still have some quite funny discrepancies on
the inner workings — and that affects your code.
&lt;/p&gt;
&lt;p&gt;
To make things yet worse, you don't have much things to solve the
dependency hell, aside from writing a custom build tool. And even so,
you'll likely need to download and build a set of different libraries to
get everything working.
&lt;/p&gt;
&lt;p&gt;
This is not exactly my definition of fun.
&lt;/p&gt;
&lt;p&gt;
For this to really work, we'd need a good package manager; like what &lt;a href=&quot;http://github.com/isaacs/npm&quot;&gt;npm&lt;/a&gt;
is to &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt;. And we would also need either some support for loading
these external modules in a sane way (you do &lt;a href=&quot;http://github.com/killdream/jello&quot;&gt;have&lt;/a&gt; &lt;a href=&quot;http://requirejs.org&quot;&gt;some&lt;/a&gt; &lt;a href=&quot;http://labjs.com&quot;&gt;libraries&lt;/a&gt; &lt;a href=&quot;http://news.ycombinator.com/item?id=2300423&quot;&gt;for that&lt;/a&gt;), rather than having to do with build scripts.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;Wrapping it up &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;


&lt;p&gt;
There's no such thing as &lt;b&gt;one true way&lt;/b&gt;. I don't think modular
libraries/frameworks solve all the problems, but they do address quite
some of the problems we have with the current models of libraries.
&lt;/p&gt;
&lt;p&gt;
And it would be nice having a healthier environment for developing new
awesome apps on the Browser, without having to write everything from
scrath again because the thing you need is only included in another
library, and it uses a framework-centric approach.
&lt;/p&gt;
&lt;p&gt;
All in all, it's something I think would benefit the JavaScript
community as a whole :3
&lt;/p&gt;



&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn.1&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; I hate using the term &quot;framework&quot; to refer to libraries with all
my guts. Seriously, people, is `library` **that** hard to spell?
&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn.2&quot; href=&quot;#fnr.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; I'll work on tests and documentation for &lt;a href=&quot;http://github.com/killdream/ekho&quot;&gt;Ekho&lt;/a&gt; and friends when I
have time to do so. Probably after I finish some of the core
concepts/early prototypes for &lt;a href=&quot;http://killdream.github.com/orpheos&quot;&gt;OrpheOS&lt;/a&gt;. Until then, considering
the library a beta release may be a good thing.
&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn.3&quot; href=&quot;#fnr.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; I don't think PrototypeJS has a consistent API, for
example. Though Ruby people might say otherwise, it just strikes
me as odd if you use &lt;code&gt;bindAsEventListener&lt;/code&gt; and &lt;code&gt;gsub&lt;/code&gt; randomly on
your API (I would never take a Ruby programmer's word on good API
design anyways ;P). jQuery's API on the other hand (although I've
only used a small subset of it for a short time) is just a mess
of counter-intuitive and poorly-named methods. People should stop
getting inspired by PHP when designing an API&amp;hellip;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Meeting Enlightenment</title>
   <link href="http://killdream.github.com//blog/2011/03/meeting-enlightenment/index.html"/>
   <updated>2011-03-05T00:00:00-03:00</updated>
   <id>http://killdream.github.com//blog/2011/03/meeting-enlightenment/meeting-enlightenment</id>
   <content type="html">&lt;p&gt;
I've used quite a few Window Managers in the past: IceWM, KDE, Gnome-Shell,
Metacity, Fluxbox, etc. but they either looked plain horrible, were bloated
like hell — yeah, KDE, take that — or were just plain and irritatingly slow.
&lt;/p&gt;
&lt;p&gt;
I've always liked lightweight and tiling window managers — which is one of the
reasons I love Emacs — but they all felt too plain to my likings. As an art
lover, I need some spark and beauty on my desktop, rather than strictly
functional things.
&lt;/p&gt;
&lt;p&gt;
So, here am I ranting about about the features of e17 that got me hooked, and
&lt;i&gt;why&lt;/i&gt; &lt;b&gt;you&lt;/b&gt; &lt;i&gt;should give it a try&lt;/i&gt;.
&lt;/p&gt;



&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Why you should try it &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
You probably heard elsewhere that enlightenment is lightweight and
sparkles. But I don't think that is enough reason to switch to a Window
Manager — all the more when it hasn't seen a stable release yet.
&lt;/p&gt;
&lt;p&gt;
So, here's my little list of reasons:
&lt;/p&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-1_1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_1&quot;&gt;Lightweight and FAST &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_1&quot;&gt;


&lt;p&gt;
I have a kinda old PC with an on-board graphic card, which means that not
even OpenGL gets some love here, thus being lightweight is a must for
me. Not only this, but Enlightenment manages to be a lot faster than any
other window manager I've tried so far — taking the delicious amount of
eye-candiness into account, obviously.
&lt;/p&gt;
&lt;p&gt;
I also have a &lt;a href=&quot;http://macpup.org&quot;&gt;MacPup&lt;/a&gt; that runs directly from my thumb-drive. The distro is
bundled with IceWM, Enlightenment and another window manager I can't
remember the name for life, still it fits nicely in less than 228MB, and
runs entirely on the RAM, leaving all the remaining space on my thumb-drive
for &lt;b&gt;actual data&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
It doesn't makes much of a difference if you have a bleeding-edge PC, or use
any KDE application out there — I try to stay clear of them, by the way.
&lt;/p&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_2&quot;&gt;Fully configurable &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_2&quot;&gt;


&lt;p&gt;
Which is one of the reasons I use Linux in the first place. I like
configuring everything to fit my workflow, and Enlightenment lets me do so
quite easily with the settings GUI.
&lt;/p&gt;
&lt;p&gt;
Most of this configuration is quite straight forward, but some of the UI are
not that good.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/settings.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/settings.jpg&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
You can also configure everything from the command line, or editing the
configuration files — though in this case you have to decompile them and
recompile when you're done.
&lt;/p&gt;
&lt;p&gt;
Another good thing about Enlightenment's configuration is the profiles. This
allows you to have as many different configurations as you need, and allows
you to safely test stuff away, while having your previous configuration
safely stored.
&lt;/p&gt;
&lt;p&gt;
For example, I use three different profiles for my MacPup: Netbook, Notebook
and Desktop. Each providing a slight different set of keybindings, mouse
adjustments and screen/modules. So any time I plug it in a different
computer, I just have to select a suitable profile instead of reconfiguring
everything.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_3&quot;&gt;Modularity &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_3&quot;&gt;


&lt;p&gt;
Since Enlightenment is built up on a modular structure, you can choose
exactly which features you use instead of wasting RAM on useless stuff. This
also means that plugins blend in really nice with the entire Window Manager,
which is always a good thing.
&lt;/p&gt;
&lt;p&gt;
Alongside with the configuration profiles, this lets you test modules away
without having to worry about breaking the Window Manager — since you can
always go back to your previous sane profile.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_4&quot;&gt;Shelves and Gadgets &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_4&quot;&gt;


&lt;p&gt;
Metacity has &lt;code&gt;desklets&lt;/code&gt; and &lt;code&gt;panels&lt;/code&gt;, Enlightenment has &lt;code&gt;shelves&lt;/code&gt; and
&lt;code&gt;gadgets&lt;/code&gt;. Gadgets are just small applications you can use on your desktop,
and shelves are a way to group a collection of gadgets.
&lt;/p&gt;
&lt;p&gt;
Shelves also have a few interesting features that I like. The most important
of them is the ability of hiding a shelf until I actually &lt;b&gt;need it&lt;/b&gt; — by
either moving my mouse over the edge of the screen, or clicking on it. I
just hate clutter and think my screen space is better used to hold the
windows of the applications I use, instead of a taskbar or dock.
&lt;/p&gt;
&lt;p&gt;
Another interesting stuff about shelves is that, aside of the screen
position, you can also specify the stacking position. So shelves can be
placed above or below everything. You can also configure whether the
shelves' space should be available for windows or not.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/desktop-thumb.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/desktop-thumb.jpg&quot; /&gt;
&lt;/p&gt;
&lt;blockquote&gt;

&lt;p&gt;Top, top-left and bottom-right are shelves. The other ones are plain gadgets
placed over the desktop.
&lt;/p&gt;
&lt;/blockquote&gt;



&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_5&quot;&gt;Charmingly beautiful &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_5&quot;&gt;


&lt;p&gt;
Even if you don't have a powerful enough computer to run the compositing
stuff (Enlightenment ships with Ecomorph, which is a port of Compiz), there
are still plenty of eye-candy for you, including animated backgrounds,
animated icons and transitions.
&lt;/p&gt;
&lt;p&gt;
Better still, everything is theme-able, including the third-party
modules. And you can build your own theme with parts of various other
themes.
&lt;/p&gt;
&lt;p&gt;
For Gtk applications you'll need to install a suitable Gtk theme though.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/themes-thumb.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/themes-thumb.jpg&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
Currently, I'm using &lt;b&gt;Detour&lt;/b&gt; as my base Enlightenment theme, which parts of
Simply White, Imago and a few others. For the Gtk part, the Orta theme
blends in quite nicely and looks hella sweet :3
&lt;/p&gt;
&lt;p&gt;
To &lt;b&gt;feel&lt;/b&gt; the beauty of Enlightenment you have to try it though. It's not
something that can be portrayed easily with images. You can have a go at
some youtube videos, though.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_6&quot;&gt;Everything a few keystrokes away &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_6&quot;&gt;


&lt;p&gt;
I &lt;b&gt;loathe&lt;/b&gt; going through &lt;i&gt;xyz&lt;/i&gt; menus just to launch an application — I hate
most menus, actually. Enlightenment comes with a nice QuickSilver-like
launcher though, called Everything. If you're not familiar with the Mac
world, it's something like Gnome-Do, but with far more levels of awesomeness
— and frankly, I've always found Gnome-Do frustrating.
&lt;/p&gt;
&lt;p&gt;
Everything follows the modularity structure of Enlightenment, so you can add
any plugin to it to make doing some tasks faster and easier.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/everything.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/everything.jpg&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
You can have a quick calculator, spell checker, web search, file search and
any other thing you want with a plugin. It's &lt;b&gt;really&lt;/b&gt; handy (even for
someone who almost uses Emacs as his OS).
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_7&quot;&gt;Shortcuts for anything &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_7&quot;&gt;


&lt;p&gt;
Another thing that I dislike are mouses. I just can't get used to them and
feel that they get too much on my way. Well, when using Enlightenment I
don't need it most of the time, because there's keybindings for almost
everything.
&lt;/p&gt;
&lt;p&gt;
The input dialogues allows for shortcuts for usual system commands, as you
would expect, but also to manipulate virtual desktops and windows. And when
I say &lt;i&gt;manipulate windows&lt;/i&gt; I mean you can resize, position and switch
between these windows using your keyboard in a sane way.
&lt;/p&gt;
&lt;p&gt;
I have almost all possible cute mnemonic combinations with the useless Super
key (Super+key, Ctrl+Super+key, Shift+Super+key, Alt+Super+key, &amp;hellip;) to do
some actual useful stuff, so I guess you can get an idea of the
awesomeness :3
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_8&quot;&gt;Tiling &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_8&quot;&gt;


&lt;p&gt;
I believe this is bundled in e17 in the Illume2, but since the Illume stuff
is for embed and mobile systems, I haven't dig into this. Instead I use the
tiling module that's on the SVN.
&lt;/p&gt;
&lt;p&gt;
The module isn't perfect, but I don't have that many complaints against it.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_9&quot;&gt;Handling errors gracefully &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_9&quot;&gt;


&lt;p&gt;
Yes, the Enlightenment's window manager (e17) is still in pre-alpha, so it's
not all &lt;b&gt;that&lt;/b&gt; stable — although I've been using it for months now without
much trouble.
&lt;/p&gt;
&lt;p&gt;
However, you're likely to experience some segfaults if you play around too
much:
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/esegvd.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/esegvd.jpg&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
It's not something you should worry that much though, only the window
manager is affected, not your data. And it gracefully recovers itself to the
previous state in less than a second, which is a pretty nice thing.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;The drawbacks &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
Yeah, Enlightenment is great and all, but it has its drawbacks. The worst issue
is really stability. Not that it will crash each minute, but you're likely to
experience a few minor issues: like an auto-hide shelf that won't hide and stuff like that.
&lt;/p&gt;
&lt;p&gt;
This can all be solved by restarting the Window Manager — and I mean the WM
not your DM, which means that your application state won't be affected. You
can restart e17 from the main menu in &lt;code&gt;Enlightenment → Restart&lt;/code&gt;.  I
personally prefer binding a shortcut to it (&lt;code&gt;Super-r&lt;/code&gt;) and using that.
&lt;/p&gt;
&lt;p&gt;
You may also miss some features. I think the modules have a great coverage of
the features &lt;b&gt;I&lt;/b&gt; need — even though the tiling isn't perfect — but they may
not cover well your use case.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Getting it up and running &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
There are quite some ways to try Enlightenment out now. You don't need to
compile it out yourself if you don't want to, or are just to lazy to do so.
&lt;/p&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-3_1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_1&quot;&gt;The easy way &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_1&quot;&gt;


&lt;p&gt;
You can grab any Linux distro that comes with Enlightenment as their default
Window Manager and run from the LiveCD or install it on a spare HDD partition
or a VM. Just get any of the following and try it away:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;http://www.unity-linux.hu/unite17&quot;&gt;Unite17&lt;/a&gt; — Unity-based desktop distro
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://macpup.org&quot;&gt;MacPup&lt;/a&gt;  — Puppy linux distro (uses Ubuntu Lucid Lynx)
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://moonos.org&quot;&gt;moonOS&lt;/a&gt;  — Ubuntu-based. Neak's main edition uses e17.
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://bodhilinux.com/index.html&quot;&gt;Bodhi&lt;/a&gt;   — Minimalist Ubuntu 10.04-based distro.

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_2&quot;&gt;The hard way &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_2&quot;&gt;


&lt;p&gt;
If you want to try your luck, you can grab the source from the SVN
repository and compile it yourself&amp;hellip;  Okay, it's not so hard, it just takes
a little bit of time depending on your internet connection and computer
resources.
&lt;/p&gt;
&lt;p&gt;
I'll try to describe a little the steps to get e17 up and running, and while
these concepts should apply to any distro, bear in mind that I'm assuming an
Ubuntu one as basis for package list and specific commands.
&lt;/p&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-3_2_1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3_2_1&quot;&gt;Before installing &lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3_2_1&quot;&gt;


&lt;p&gt;
e17 depends on quite a few libraries and tools. The &lt;a href=&quot;http://svn.enlightenment.org&quot;&gt;svn repository&lt;/a&gt; lists most
of it, but depending on your distro and the amount of C-coding/compiling you've
done, it may vary. At least, make sure you have all of the tools and libraries
listed there.
&lt;/p&gt;
&lt;p&gt;
If you happen to be using an Ubuntu distro, you can get away with getting the
following from apt (just copy/paste it on the terminal):
&lt;/p&gt;



&lt;pre class=&quot;src src-shell-script&quot;&gt;$ sudo apt-get install subversion gcc autoconf &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
autopoint automake libtool make gettext &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
libpam0g-dev libfreetype6-dev libpng-dev &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
libjpeg-dev zlib1g-dev libdbus-1-dev &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
liblua5.1-0-dev libx11-dev libxcursor-dev &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
libxrender-dev libxrandr-dev libxfixes-dev &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
libxdamage-dev libxcomposite-dev libxss-dev &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
libxp-dev libxext-dev libxinerama-dev &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
libxkbfile-dev libxtst-dev libtiff-dev &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
librsvg2-dev libgif-dev libcurl4-gnutls-dev &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
libgnutls-dev libxml2-dev libudev-dev
&lt;/pre&gt;




&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_2_2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3_2_2&quot;&gt;Building it &lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3_2_2&quot;&gt;


&lt;p&gt;
You can just checkout from the svn repository and run &lt;code&gt;autogen.sh &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install&lt;/code&gt; for every project. BUT THERE ARE BAZILLIONS OF THEM. To
automate this annoying chore, I just use the &lt;code&gt;easy_e17.sh&lt;/code&gt; script.
&lt;/p&gt;
&lt;p&gt;
So, to get it the easy way:
&lt;/p&gt;



&lt;pre class=&quot;src src-shell-script&quot;&gt;$ wget http://omicron.homeip.net/projects/easy_e17/easy_e17.sh
$ chmod +x easy_e17.sh
$ sudo ./easy_e17.sh --install
&lt;/pre&gt;



&lt;p&gt;
This will install the the most basic functionality of e17 — the core EFL and
the WM.
&lt;/p&gt;
&lt;p&gt;
If you want to get more power, you can install all of the extra modules, by
providing &lt;code&gt;--packagelist=half&lt;/code&gt; to the installer, or simply everything, by
providing &lt;code&gt;--packagelist=full&lt;/code&gt;. Be warned that some of these additional
features may not compile, or may be unmaintained and conflict with your stuff.
&lt;/p&gt;
&lt;p&gt;
To peek on the things you can configure in the install script, just use
&lt;code&gt;--help&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
If you'd rather have control over all of the build process, or want a sane way
of getting the newest features of the repository, you can use the sample script
on the &lt;a href=&quot;http://svn.enlightenment.org&quot;&gt;svn repository&lt;/a&gt; as basis and modify it as you need.
&lt;/p&gt;
&lt;blockquote&gt;

&lt;p&gt;Note that for building the &lt;code&gt;ewheather&lt;/code&gt; module you'll need to build and
install the &lt;code&gt;libeweather&lt;/code&gt; (on &lt;code&gt;trunk/PROTO&lt;/code&gt;) first. For the &lt;code&gt;places&lt;/code&gt; module
you'll need &lt;code&gt;HAL&lt;/code&gt; too.
&lt;/p&gt;
&lt;/blockquote&gt;



&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_2_3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3_2_3&quot;&gt;Setting the environment &lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3_2_3&quot;&gt;


&lt;p&gt;
If all goes well, you'll have enlightenment and its libraries (and perhaps a
few extra modules too) fully installed on your system. If you've used a
non-standard install path, which is probably the case with running the
&lt;code&gt;easy_e17.sh&lt;/code&gt; script, you'll need to export the paths so your OS can find all
that stuff.
&lt;/p&gt;
&lt;p&gt;
You can just copy the lines &lt;code&gt;easy_e17.sh&lt;/code&gt; tells you and paste them in your
&lt;code&gt;.bashrc&lt;/code&gt; file, then reload it:
&lt;/p&gt;



&lt;pre class=&quot;src src-shell-script&quot;&gt;$ nano ~/.bashrc
$ source ~/.bashrc
&lt;/pre&gt;




&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_2_4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3_2_4&quot;&gt;4. Telling your OS to use e17 &lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3_2_4&quot;&gt;


&lt;p&gt;
If you're using a Desktop Manager, you should probably look for how to add more
sessions to it. If you just don't care about all that, you can set a simple
&lt;code&gt;.xsession&lt;/code&gt; file on your &lt;code&gt;$HOME&lt;/code&gt; folder and restart X:
&lt;/p&gt;



&lt;pre class=&quot;src src-shell-script&quot;&gt;$ echo &lt;span style=&quot;color: #A6E32D;&quot;&gt;&quot;exec `which enlightenment_start`&quot;&lt;/span&gt; &amp;gt; ~/.xsession
&lt;/pre&gt;



&lt;blockquote&gt;

&lt;p&gt;if you're using a Desktop Manager, you'll need to logout and select &lt;code&gt;User Defined Session&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;



&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Wrapping it up &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;
As you can see, there's much more to Enlightenment than the &quot;&lt;b&gt;lightweight&lt;/b&gt;&quot; or
&quot;&lt;b&gt;beauty at your fingertips&lt;/b&gt;&quot; stuff you hear everywhere, but most of the nice
things about it can't be easily (if at all) put into words. It's about the
UX — about how you feel while interacting with the system, — and as such it's
something you really have to try out to understand.
&lt;/p&gt;
&lt;p&gt;
Don't forget to drop by &lt;code&gt;#e@irc.freenode.org&lt;/code&gt; if you have any doubt or problems
with EFL or e17.
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Meeting Enlightenment</title>
   <link href="http://killdream.github.com//blog/2011/03/meeting-enlightenment/index.html"/>
   <updated>2011-03-05T00:00:00-03:00</updated>
   <id>http://killdream.github.com//blog/2011/03/meeting-enlightenment/meeting-enlightenment</id>
   <content type="html">&lt;p&gt;
I've used quite a few Window Managers in the past: IceWM, KDE, Gnome-Shell,
Metacity, Fluxbox, etc. but they either looked plain horrible, were bloated
like hell — yeah, KDE, take that — or were just plain and irritatingly slow.
&lt;/p&gt;
&lt;p&gt;
I've always liked lightweight and tiling window managers — which is one of the
reasons I love Emacs — but they all felt too plain to my likings. As an art
lover, I need some spark and beauty on my desktop, rather than strictly
functional things.
&lt;/p&gt;
&lt;p&gt;
So, here am I ranting about about the features of e17 that got me hooked, and
&lt;i&gt;why&lt;/i&gt; &lt;b&gt;you&lt;/b&gt; &lt;i&gt;should give it a try&lt;/i&gt;.
&lt;/p&gt;



&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Why you should try it &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
You probably heard elsewhere that enlightenment is lightweight and
sparkles. But I don't think that is enough reason to switch to a Window
Manager — all the more when it hasn't seen a stable release yet.
&lt;/p&gt;
&lt;p&gt;
So, here's my little list of reasons:
&lt;/p&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-1_1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_1&quot;&gt;Lightweight and FAST &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_1&quot;&gt;


&lt;p&gt;
I have a kinda old PC with an on-board graphic card, which means that not
even OpenGL gets some love here, thus being lightweight is a must for
me. Not only this, but Enlightenment manages to be a lot faster than any
other window manager I've tried so far — taking the delicious amount of
eye-candiness into account, obviously.
&lt;/p&gt;
&lt;p&gt;
I also have a &lt;a href=&quot;http://macpup.org&quot;&gt;MacPup&lt;/a&gt; that runs directly from my thumb-drive. The distro is
bundled with IceWM, Enlightenment and another window manager I can't
remember the name for life, still it fits nicely in less than 228MB, and
runs entirely on the RAM, leaving all the remaining space on my thumb-drive
for &lt;b&gt;actual data&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
It doesn't makes much of a difference if you have a bleeding-edge PC, or use
any KDE application out there — I try to stay clear of them, by the way.
&lt;/p&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_2&quot;&gt;Fully configurable &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_2&quot;&gt;


&lt;p&gt;
Which is one of the reasons I use Linux in the first place. I like
configuring everything to fit my workflow, and Enlightenment lets me do so
quite easily with the settings GUI.
&lt;/p&gt;
&lt;p&gt;
Most of this configuration is quite straight forward, but some of the UI are
not that good.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/settings.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/settings.jpg&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
You can also configure everything from the command line, or editing the
configuration files — though in this case you have to decompile them and
recompile when you're done.
&lt;/p&gt;
&lt;p&gt;
Another good thing about Enlightenment's configuration is the profiles. This
allows you to have as many different configurations as you need, and allows
you to safely test stuff away, while having your previous configuration
safely stored.
&lt;/p&gt;
&lt;p&gt;
For example, I use three different profiles for my MacPup: Netbook, Notebook
and Desktop. Each providing a slight different set of keybindings, mouse
adjustments and screen/modules. So any time I plug it in a different
computer, I just have to select a suitable profile instead of reconfiguring
everything.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_3&quot;&gt;Modularity &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_3&quot;&gt;


&lt;p&gt;
Since Enlightenment is built up on a modular structure, you can choose
exactly which features you use instead of wasting RAM on useless stuff. This
also means that plugins blend in really nice with the entire Window Manager,
which is always a good thing.
&lt;/p&gt;
&lt;p&gt;
Alongside with the configuration profiles, this lets you test modules away
without having to worry about breaking the Window Manager — since you can
always go back to your previous sane profile.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_4&quot;&gt;Shelves and Gadgets &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_4&quot;&gt;


&lt;p&gt;
Metacity has &lt;code&gt;desklets&lt;/code&gt; and &lt;code&gt;panels&lt;/code&gt;, Enlightenment has &lt;code&gt;shelves&lt;/code&gt; and
&lt;code&gt;gadgets&lt;/code&gt;. Gadgets are just small applications you can use on your desktop,
and shelves are a way to group a collection of gadgets.
&lt;/p&gt;
&lt;p&gt;
Shelves also have a few interesting features that I like. The most important
of them is the ability of hiding a shelf until I actually &lt;b&gt;need it&lt;/b&gt; — by
either moving my mouse over the edge of the screen, or clicking on it. I
just hate clutter and think my screen space is better used to hold the
windows of the applications I use, instead of a taskbar or dock.
&lt;/p&gt;
&lt;p&gt;
Another interesting stuff about shelves is that, aside of the screen
position, you can also specify the stacking position. So shelves can be
placed above or below everything. You can also configure whether the
shelves' space should be available for windows or not.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/desktop-thumb.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/desktop-thumb.jpg&quot; /&gt;
&lt;/p&gt;
&lt;blockquote&gt;

&lt;p&gt;Top, top-left and bottom-right are shelves. The other ones are plain gadgets
placed over the desktop.
&lt;/p&gt;
&lt;/blockquote&gt;



&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_5&quot;&gt;Charmingly beautiful &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_5&quot;&gt;


&lt;p&gt;
Even if you don't have a powerful enough computer to run the compositing
stuff (Enlightenment ships with Ecomorph, which is a port of Compiz), there
are still plenty of eye-candy for you, including animated backgrounds,
animated icons and transitions.
&lt;/p&gt;
&lt;p&gt;
Better still, everything is theme-able, including the third-party
modules. And you can build your own theme with parts of various other
themes.
&lt;/p&gt;
&lt;p&gt;
For Gtk applications you'll need to install a suitable Gtk theme though.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/themes-thumb.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/themes-thumb.jpg&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
Currently, I'm using &lt;b&gt;Detour&lt;/b&gt; as my base Enlightenment theme, which parts of
Simply White, Imago and a few others. For the Gtk part, the Orta theme
blends in quite nicely and looks hella sweet :3
&lt;/p&gt;
&lt;p&gt;
To &lt;b&gt;feel&lt;/b&gt; the beauty of Enlightenment you have to try it though. It's not
something that can be portrayed easily with images. You can have a go at
some youtube videos, though.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_6&quot;&gt;Everything a few keystrokes away &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_6&quot;&gt;


&lt;p&gt;
I &lt;b&gt;loathe&lt;/b&gt; going through &lt;i&gt;xyz&lt;/i&gt; menus just to launch an application — I hate
most menus, actually. Enlightenment comes with a nice QuickSilver-like
launcher though, called Everything. If you're not familiar with the Mac
world, it's something like Gnome-Do, but with far more levels of awesomeness
— and frankly, I've always found Gnome-Do frustrating.
&lt;/p&gt;
&lt;p&gt;
Everything follows the modularity structure of Enlightenment, so you can add
any plugin to it to make doing some tasks faster and easier.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/everything.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/everything.jpg&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
You can have a quick calculator, spell checker, web search, file search and
any other thing you want with a plugin. It's &lt;b&gt;really&lt;/b&gt; handy (even for
someone who almost uses Emacs as his OS).
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_7&quot;&gt;Shortcuts for anything &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_7&quot;&gt;


&lt;p&gt;
Another thing that I dislike are mouses. I just can't get used to them and
feel that they get too much on my way. Well, when using Enlightenment I
don't need it most of the time, because there's keybindings for almost
everything.
&lt;/p&gt;
&lt;p&gt;
The input dialogues allows for shortcuts for usual system commands, as you
would expect, but also to manipulate virtual desktops and windows. And when
I say &lt;i&gt;manipulate windows&lt;/i&gt; I mean you can resize, position and switch
between these windows using your keyboard in a sane way.
&lt;/p&gt;
&lt;p&gt;
I have almost all possible cute mnemonic combinations with the useless Super
key (Super+key, Ctrl+Super+key, Shift+Super+key, Alt+Super+key, &amp;hellip;) to do
some actual useful stuff, so I guess you can get an idea of the
awesomeness :3
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_8&quot;&gt;Tiling &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_8&quot;&gt;


&lt;p&gt;
I believe this is bundled in e17 in the Illume2, but since the Illume stuff
is for embed and mobile systems, I haven't dig into this. Instead I use the
tiling module that's on the SVN.
&lt;/p&gt;
&lt;p&gt;
The module isn't perfect, but I don't have that many complaints against it.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1_9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1_9&quot;&gt;Handling errors gracefully &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1_9&quot;&gt;


&lt;p&gt;
Yes, the Enlightenment's window manager (e17) is still in pre-alpha, so it's
not all &lt;b&gt;that&lt;/b&gt; stable — although I've been using it for months now without
much trouble.
&lt;/p&gt;
&lt;p&gt;
However, you're likely to experience some segfaults if you play around too
much:
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/esegvd.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/esegvd.jpg&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
It's not something you should worry that much though, only the window
manager is affected, not your data. And it gracefully recovers itself to the
previous state in less than a second, which is a pretty nice thing.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;The drawbacks &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
Yeah, Enlightenment is great and all, but it has its drawbacks. The worst issue
is really stability. Not that it will crash each minute, but you're likely to
experience a few minor issues: like an auto-hide shelf that won't hide and stuff like that.
&lt;/p&gt;
&lt;p&gt;
This can all be solved by restarting the Window Manager — and I mean the WM
not your DM, which means that your application state won't be affected. You
can restart e17 from the main menu in &lt;code&gt;Enlightenment → Restart&lt;/code&gt;.  I
personally prefer binding a shortcut to it (&lt;code&gt;Super-r&lt;/code&gt;) and using that.
&lt;/p&gt;
&lt;p&gt;
You may also miss some features. I think the modules have a great coverage of
the features &lt;b&gt;I&lt;/b&gt; need — even though the tiling isn't perfect — but they may
not cover well your use case.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Getting it up and running &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
There are quite some ways to try Enlightenment out now. You don't need to
compile it out yourself if you don't want to, or are just to lazy to do so.
&lt;/p&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-3_1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_1&quot;&gt;The easy way &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_1&quot;&gt;


&lt;p&gt;
You can grab any Linux distro that comes with Enlightenment as their default
Window Manager and run from the LiveCD or install it on a spare HDD partition
or a VM. Just get any of the following and try it away:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;http://www.unity-linux.hu/unite17&quot;&gt;Unite17&lt;/a&gt; — Unity-based desktop distro
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://macpup.org&quot;&gt;MacPup&lt;/a&gt;  — Puppy linux distro (uses Ubuntu Lucid Lynx)
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://moonos.org&quot;&gt;moonOS&lt;/a&gt;  — Ubuntu-based. Neak's main edition uses e17.
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://bodhilinux.com/index.html&quot;&gt;Bodhi&lt;/a&gt;   — Minimalist Ubuntu 10.04-based distro.

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3_2&quot;&gt;The hard way &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3_2&quot;&gt;


&lt;p&gt;
If you want to try your luck, you can grab the source from the SVN
repository and compile it yourself&amp;hellip;  Okay, it's not so hard, it just takes
a little bit of time depending on your internet connection and computer
resources.
&lt;/p&gt;
&lt;p&gt;
I'll try to describe a little the steps to get e17 up and running, and while
these concepts should apply to any distro, bear in mind that I'm assuming an
Ubuntu one as basis for package list and specific commands.
&lt;/p&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-3_2_1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3_2_1&quot;&gt;Before installing &lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3_2_1&quot;&gt;


&lt;p&gt;
e17 depends on quite a few libraries and tools. The &lt;a href=&quot;http://svn.enlightenment.org&quot;&gt;svn repository&lt;/a&gt; lists most
of it, but depending on your distro and the amount of C-coding/compiling you've
done, it may vary. At least, make sure you have all of the tools and libraries
listed there.
&lt;/p&gt;
&lt;p&gt;
If you happen to be using an Ubuntu distro, you can get away with getting the
following from apt (just copy/paste it on the terminal):
&lt;/p&gt;



&lt;pre class=&quot;src src-shell-script&quot;&gt;$ sudo apt-get install subversion gcc autoconf &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
autopoint automake libtool make gettext &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
libpam0g-dev libfreetype6-dev libpng-dev &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
libjpeg-dev zlib1g-dev libdbus-1-dev &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
liblua5.1-0-dev libx11-dev libxcursor-dev &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
libxrender-dev libxrandr-dev libxfixes-dev &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
libxdamage-dev libxcomposite-dev libxss-dev &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
libxp-dev libxext-dev libxinerama-dev &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
libxkbfile-dev libxtst-dev libtiff-dev &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
librsvg2-dev libgif-dev libcurl4-gnutls-dev &lt;span style=&quot;color: #A6E32D;&quot;&gt;\&lt;/span&gt;
libgnutls-dev libxml2-dev libudev-dev
&lt;/pre&gt;




&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_2_2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3_2_2&quot;&gt;Building it &lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3_2_2&quot;&gt;


&lt;p&gt;
You can just checkout from the svn repository and run &lt;code&gt;autogen.sh &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install&lt;/code&gt; for every project. BUT THERE ARE BAZILLIONS OF THEM. To
automate this annoying chore, I just use the &lt;code&gt;easy_e17.sh&lt;/code&gt; script.
&lt;/p&gt;
&lt;p&gt;
So, to get it the easy way:
&lt;/p&gt;



&lt;pre class=&quot;src src-shell-script&quot;&gt;$ wget http://omicron.homeip.net/projects/easy_e17/easy_e17.sh
$ chmod +x easy_e17.sh
$ sudo ./easy_e17.sh --install
&lt;/pre&gt;



&lt;p&gt;
This will install the the most basic functionality of e17 — the core EFL and
the WM.
&lt;/p&gt;
&lt;p&gt;
If you want to get more power, you can install all of the extra modules, by
providing &lt;code&gt;--packagelist=half&lt;/code&gt; to the installer, or simply everything, by
providing &lt;code&gt;--packagelist=full&lt;/code&gt;. Be warned that some of these additional
features may not compile, or may be unmaintained and conflict with your stuff.
&lt;/p&gt;
&lt;p&gt;
To peek on the things you can configure in the install script, just use
&lt;code&gt;--help&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
If you'd rather have control over all of the build process, or want a sane way
of getting the newest features of the repository, you can use the sample script
on the &lt;a href=&quot;http://svn.enlightenment.org&quot;&gt;svn repository&lt;/a&gt; as basis and modify it as you need.
&lt;/p&gt;
&lt;blockquote&gt;

&lt;p&gt;Note that for building the &lt;code&gt;ewheather&lt;/code&gt; module you'll need to build and
install the &lt;code&gt;libeweather&lt;/code&gt; (on &lt;code&gt;trunk/PROTO&lt;/code&gt;) first. For the &lt;code&gt;places&lt;/code&gt; module
you'll need &lt;code&gt;HAL&lt;/code&gt; too.
&lt;/p&gt;
&lt;/blockquote&gt;



&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_2_3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3_2_3&quot;&gt;Setting the environment &lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3_2_3&quot;&gt;


&lt;p&gt;
If all goes well, you'll have enlightenment and its libraries (and perhaps a
few extra modules too) fully installed on your system. If you've used a
non-standard install path, which is probably the case with running the
&lt;code&gt;easy_e17.sh&lt;/code&gt; script, you'll need to export the paths so your OS can find all
that stuff.
&lt;/p&gt;
&lt;p&gt;
You can just copy the lines &lt;code&gt;easy_e17.sh&lt;/code&gt; tells you and paste them in your
&lt;code&gt;.bashrc&lt;/code&gt; file, then reload it:
&lt;/p&gt;



&lt;pre class=&quot;src src-shell-script&quot;&gt;$ nano ~/.bashrc
$ source ~/.bashrc
&lt;/pre&gt;




&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3_2_4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3_2_4&quot;&gt;4. Telling your OS to use e17 &lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3_2_4&quot;&gt;


&lt;p&gt;
If you're using a Desktop Manager, you should probably look for how to add more
sessions to it. If you just don't care about all that, you can set a simple
&lt;code&gt;.xsession&lt;/code&gt; file on your &lt;code&gt;$HOME&lt;/code&gt; folder and restart X:
&lt;/p&gt;



&lt;pre class=&quot;src src-shell-script&quot;&gt;$ echo &lt;span style=&quot;color: #A6E32D;&quot;&gt;&quot;exec `which enlightenment_start`&quot;&lt;/span&gt; &amp;gt; ~/.xsession
&lt;/pre&gt;



&lt;blockquote&gt;

&lt;p&gt;if you're using a Desktop Manager, you'll need to logout and select &lt;code&gt;User Defined Session&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;



&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Wrapping it up &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;
As you can see, there's much more to Enlightenment than the &quot;&lt;b&gt;lightweight&lt;/b&gt;&quot; or
&quot;&lt;b&gt;beauty at your fingertips&lt;/b&gt;&quot; stuff you hear everywhere, but most of the nice
things about it can't be easily (if at all) put into words. It's about the
UX — about how you feel while interacting with the system, — and as such it's
something you really have to try out to understand.
&lt;/p&gt;
&lt;p&gt;
Don't forget to drop by &lt;code&gt;#e@irc.freenode.org&lt;/code&gt; if you have any doubt or problems
with EFL or e17.
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>My workspace in 7 items</title>
   <link href="http://killdream.github.com//blog/2011/02/my-workspace-in-7-items/index.html"/>
   <updated>2011-02-12T00:00:00-02:00</updated>
   <id>http://killdream.github.com//blog/2011/02/my-workspace-in-7-items/my-workspace-in-7-items</id>
   <content type="html">&lt;p&gt;
&lt;a href=&quot;http://diskchocolate.com/blog/2011/02/02/meu-ambiente-de-trabalho-em-7-itens/&quot;&gt;Cindy&lt;/a&gt;, that cutie, invited me for this meme, so here I am, describing the
things I use in my little everyday life to get my work done. Those are &lt;b&gt;very important things&lt;/b&gt; for my work.
&lt;/p&gt;
&lt;p&gt;
I mean, seriously :3
&lt;/p&gt;


&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;GNU/Linux: Ubuntu 10.10 &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
I should start with the most important of all these things: my OS. I've been
using the Ubuntu distro for quite some time now and I'm quite happy with
it. Though I still dislike some of its organisation, most of the things are
nicer than the other GNU/Linux distros I've tried so far.
&lt;/p&gt;
&lt;p&gt;
And yes, I'm saying that being &lt;i&gt;noob friendly&lt;/i&gt; (as in &lt;i&gt;user friendly&lt;/i&gt;) isn't a
bad thing — &lt;i&gt;au contraire&lt;/i&gt;, it's one of its strengths. At any rate, it's still
a GNU/Linux at its core, and you can customise it to your likings, just like
any other distro. Which, mind you, it's the important part.
&lt;/p&gt;
&lt;p&gt;
Metacity sucks balls though, so I've switched to using &lt;b&gt;Enlightenment&lt;/b&gt; &lt;i&gt;e17&lt;/i&gt;
as my Window Manager. Despite being a dev version, it's actually pretty stable
and the core libraries just hit a stable release a while ago. The thing I like
about it are the customisable key bindings for everything, so I almost don't
need to use the mouse for anything. Not to mention it's hella fast and
beautiful :D
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/desktop-thumb.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/desktop-thumb.jpg&quot; /&gt;
&lt;/p&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Emacs &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
My second OS&amp;hellip; I mean, my text editor of choice! Emacs, like GNU/Linux is
pretty customisable and robust. Vim people like saying it lacks a good text
editor — I beg to disagree. I love most of Emacs text editing features, and I
have gotten so used to its shortcuts that they just make sense (and I keep
pressing &lt;code&gt;C-s&lt;/code&gt; to search texts in Chrome now)
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Kill ring&lt;/b&gt; and &lt;b&gt;mark ring&lt;/b&gt; are one of my favourite features. The first one
allows you to cycle through previous text copied to the clipboard, the second
lets you save positions in the buffer and cycle through it.
&lt;/p&gt;
&lt;p&gt;
For programming, I use &lt;code&gt;js2-mode&lt;/code&gt; with &lt;code&gt;yasnippet&lt;/code&gt; and &lt;code&gt;auto-complete-mode&lt;/code&gt; for
JavaScript, and &lt;code&gt;python-mode&lt;/code&gt; with &lt;code&gt;pymacs/ropemacs&lt;/code&gt; for Python. I use the
standard modes for most of the other languages, where available.
&lt;/p&gt;
&lt;p&gt;
Obviously, I don't use Emacs just for programming. As a good Emacs hipster, I
try to do everything from it, so I use &lt;code&gt;ERC&lt;/code&gt; for chatting with people on IRC,
&lt;code&gt;Twittering-mode&lt;/code&gt; for posting to twitter and stalking people, &lt;code&gt;Tumble-mode&lt;/code&gt; for
posting to my Tumblelog, &lt;code&gt;aHG&lt;/code&gt; for versioning my files through Mercurial, and a
few other things.
&lt;/p&gt;
&lt;p&gt;
For e-mail I decided I'm better off sticking with Thunderbird though&amp;hellip;
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/emacs-thumb.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/emacs-thumb.jpg&quot; /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Mercurial &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
Simply the best VCS. Ever. Period. Take that, git!
&lt;/p&gt;
&lt;p&gt;
Erm, anyways, I use Mercurial for my versioning. I used to rely on ol' SVN pal
back then, and the transition to Mercurial was really pretty smooth. Everything
in Hg feels pretty natural if you have some background in &lt;i&gt;version control&lt;/i&gt;,
and when it doesn't feel that intuitive, the great help is there to save the
day.
&lt;/p&gt;
&lt;p&gt;
Since Mercurial's design involves having each command focused in doing just one
thing — and doing that well — you can quickly discover what the command does by
reading an one-line summary about it.
&lt;/p&gt;
&lt;p&gt;
Those are basically the things that made me fall in love with Hg. And yeah,
I've used Git, but it's just not my thing. Each command in Git is like a swiss
army knife, and it's not anything near intuitive until you get familiar with
the git-way of doing things (which I never did).
&lt;/p&gt;
&lt;p&gt;
For interacting with Git repositories I prefer using the &lt;code&gt;hg-git&lt;/code&gt; extension and
sticking with Mercurial for my local versioning.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/mercurial-thumb.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/mercurial-thumb.jpg&quot; /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Headphones &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;
Now these are more important than my OS. REALLY, I'm one to listen to music all
day long. I just can't live without it. When I'm not listening to music on the
'puter, I'm doing so on my mobile, so yeah, I'm a &lt;i&gt;bit&lt;/i&gt; of a music freak :3
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/me.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/me.jpg&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
Bad mobile pictures plus messy hair for the win :3
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;Compass &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;


&lt;p&gt;
Compass is a framework on top of Sass to take out a bit of the DRY from CSS. I
can't work with CSS without using it anymore, it provides lots of useful mixins
that you can use to workaround including lots of vendor prefix properties in
your stylesheets.
&lt;/p&gt;
&lt;p&gt;
In short, it keeps everything cleaner. And as a clean code junkie, there's just
no way I wouldn't love it :3
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;Dropbox &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;


&lt;p&gt;
I love Dropbox. I really do. I keep there lots of private backups and use it to
share content with the doujin group I'm helping with.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;Cute pictures folder &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;


&lt;p&gt;
This is also a pretty important item on my workspace. I have slight more than
10GB of cute anime pictures, Japanese idols (most of which are from the sweet
Nozomi Sasaki) and cute fashion clothes.
&lt;/p&gt;
&lt;p&gt;
And what do I do with them? Well, I just stare and go d'awww, of course, then
get motivated to do work :3
&lt;/p&gt;
&lt;p&gt;
It goes without saying that all my pictures include properly dressed girls (and
traps)&amp;hellip;
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/images-thumb.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/images-thumb.jpg&quot; /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-8&quot;&gt;Wrapping it up &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;


&lt;p&gt;
That's about it. But now that I've gone through it all, I'm curious to see how
my fella programmers' workspace looks like.
&lt;/p&gt;
&lt;p&gt;
No, this is not an implicit invitation for a meme. In fact, it's not
&lt;b&gt;implicit&lt;/b&gt; at all, so go write it up now :D
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>My workspace in 7 items</title>
   <link href="http://killdream.github.com//blog/2011/02/my-workspace-in-7-items/index.html"/>
   <updated>2011-02-12T00:00:00-02:00</updated>
   <id>http://killdream.github.com//blog/2011/02/my-workspace-in-7-items/my-workspace-in-7-items</id>
   <content type="html">&lt;p&gt;
&lt;a href=&quot;http://diskchocolate.com/blog/2011/02/02/meu-ambiente-de-trabalho-em-7-itens/&quot;&gt;Cindy&lt;/a&gt;, that cutie, invited me for this meme, so here I am, describing the
things I use in my little everyday life to get my work done. Those are &lt;b&gt;very important things&lt;/b&gt; for my work.
&lt;/p&gt;
&lt;p&gt;
I mean, seriously :3
&lt;/p&gt;


&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;GNU/Linux: Ubuntu 10.10 &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
I should start with the most important of all these things: my OS. I've been
using the Ubuntu distro for quite some time now and I'm quite happy with
it. Though I still dislike some of its organisation, most of the things are
nicer than the other GNU/Linux distros I've tried so far.
&lt;/p&gt;
&lt;p&gt;
And yes, I'm saying that being &lt;i&gt;noob friendly&lt;/i&gt; (as in &lt;i&gt;user friendly&lt;/i&gt;) isn't a
bad thing — &lt;i&gt;au contraire&lt;/i&gt;, it's one of its strengths. At any rate, it's still
a GNU/Linux at its core, and you can customise it to your likings, just like
any other distro. Which, mind you, it's the important part.
&lt;/p&gt;
&lt;p&gt;
Metacity sucks balls though, so I've switched to using &lt;b&gt;Enlightenment&lt;/b&gt; &lt;i&gt;e17&lt;/i&gt;
as my Window Manager. Despite being a dev version, it's actually pretty stable
and the core libraries just hit a stable release a while ago. The thing I like
about it are the customisable key bindings for everything, so I almost don't
need to use the mouse for anything. Not to mention it's hella fast and
beautiful :D
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/desktop-thumb.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/desktop-thumb.jpg&quot; /&gt;
&lt;/p&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Emacs &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
My second OS&amp;hellip; I mean, my text editor of choice! Emacs, like GNU/Linux is
pretty customisable and robust. Vim people like saying it lacks a good text
editor — I beg to disagree. I love most of Emacs text editing features, and I
have gotten so used to its shortcuts that they just make sense (and I keep
pressing &lt;code&gt;C-s&lt;/code&gt; to search texts in Chrome now)
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Kill ring&lt;/b&gt; and &lt;b&gt;mark ring&lt;/b&gt; are one of my favourite features. The first one
allows you to cycle through previous text copied to the clipboard, the second
lets you save positions in the buffer and cycle through it.
&lt;/p&gt;
&lt;p&gt;
For programming, I use &lt;code&gt;js2-mode&lt;/code&gt; with &lt;code&gt;yasnippet&lt;/code&gt; and &lt;code&gt;auto-complete-mode&lt;/code&gt; for
JavaScript, and &lt;code&gt;python-mode&lt;/code&gt; with &lt;code&gt;pymacs/ropemacs&lt;/code&gt; for Python. I use the
standard modes for most of the other languages, where available.
&lt;/p&gt;
&lt;p&gt;
Obviously, I don't use Emacs just for programming. As a good Emacs hipster, I
try to do everything from it, so I use &lt;code&gt;ERC&lt;/code&gt; for chatting with people on IRC,
&lt;code&gt;Twittering-mode&lt;/code&gt; for posting to twitter and stalking people, &lt;code&gt;Tumble-mode&lt;/code&gt; for
posting to my Tumblelog, &lt;code&gt;aHG&lt;/code&gt; for versioning my files through Mercurial, and a
few other things.
&lt;/p&gt;
&lt;p&gt;
For e-mail I decided I'm better off sticking with Thunderbird though&amp;hellip;
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/emacs-thumb.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/emacs-thumb.jpg&quot; /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Mercurial &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
Simply the best VCS. Ever. Period. Take that, git!
&lt;/p&gt;
&lt;p&gt;
Erm, anyways, I use Mercurial for my versioning. I used to rely on ol' SVN pal
back then, and the transition to Mercurial was really pretty smooth. Everything
in Hg feels pretty natural if you have some background in &lt;i&gt;version control&lt;/i&gt;,
and when it doesn't feel that intuitive, the great help is there to save the
day.
&lt;/p&gt;
&lt;p&gt;
Since Mercurial's design involves having each command focused in doing just one
thing — and doing that well — you can quickly discover what the command does by
reading an one-line summary about it.
&lt;/p&gt;
&lt;p&gt;
Those are basically the things that made me fall in love with Hg. And yeah,
I've used Git, but it's just not my thing. Each command in Git is like a swiss
army knife, and it's not anything near intuitive until you get familiar with
the git-way of doing things (which I never did).
&lt;/p&gt;
&lt;p&gt;
For interacting with Git repositories I prefer using the &lt;code&gt;hg-git&lt;/code&gt; extension and
sticking with Mercurial for my local versioning.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/mercurial-thumb.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/mercurial-thumb.jpg&quot; /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Headphones &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;
Now these are more important than my OS. REALLY, I'm one to listen to music all
day long. I just can't live without it. When I'm not listening to music on the
'puter, I'm doing so on my mobile, so yeah, I'm a &lt;i&gt;bit&lt;/i&gt; of a music freak :3
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/me.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/me.jpg&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
Bad mobile pictures plus messy hair for the win :3
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;Compass &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;


&lt;p&gt;
Compass is a framework on top of Sass to take out a bit of the DRY from CSS. I
can't work with CSS without using it anymore, it provides lots of useful mixins
that you can use to workaround including lots of vendor prefix properties in
your stylesheets.
&lt;/p&gt;
&lt;p&gt;
In short, it keeps everything cleaner. And as a clean code junkie, there's just
no way I wouldn't love it :3
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;Dropbox &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;


&lt;p&gt;
I love Dropbox. I really do. I keep there lots of private backups and use it to
share content with the doujin group I'm helping with.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;Cute pictures folder &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;


&lt;p&gt;
This is also a pretty important item on my workspace. I have slight more than
10GB of cute anime pictures, Japanese idols (most of which are from the sweet
Nozomi Sasaki) and cute fashion clothes.
&lt;/p&gt;
&lt;p&gt;
And what do I do with them? Well, I just stare and go d'awww, of course, then
get motivated to do work :3
&lt;/p&gt;
&lt;p&gt;
It goes without saying that all my pictures include properly dressed girls (and
traps)&amp;hellip;
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;http://dl.dropbox.com/u/4429200/blog/images-thumb.jpg&quot;  alt=&quot;http://dl.dropbox.com/u/4429200/blog/images-thumb.jpg&quot; /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-8&quot;&gt;Wrapping it up &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;


&lt;p&gt;
That's about it. But now that I've gone through it all, I'm curious to see how
my fella programmers' workspace looks like.
&lt;/p&gt;
&lt;p&gt;
No, this is not an implicit invitation for a meme. In fact, it's not
&lt;b&gt;implicit&lt;/b&gt; at all, so go write it up now :D
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 
</feed>
